Index: src/main/java/Server/Server_Socket_Handler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\n\r\nimport com.sun.xml.bind.v2.TODO;\r\n\r\nimport java.net.*;\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n\r\npublic class Server_Socket_Handler extends Thread { //Interface runnable wird benutzt, deshalb muss die run() Methode implementiert werden\r\n\r\n    // Es wird ein Socketobjekt erstellt\r\n    private Socket client;\r\n    private boolean go = true;\r\n    private String speicher;\r\n    private int UserID = -1;\r\n\r\n    public Server_Socket_Handler(Socket client) {        //Klassenkonstruktur um Objekt zu bauen\r\n        this.client = client;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        while (go) {\r\n            try {\r\n\r\n\r\n                DataInputStream incoming = new DataInputStream(this.client.getInputStream()); // Hiermit werden Datenstreams empfangen\r\n                //System.out.println(incoming.readUTF()); //Testzwecken ausgabe auf konsole\r\n                this.speicher = incoming.readUTF();\r\n\r\n                System.out.println(\"Erster speicher\" + speicher);\r\n                getRequest(speicher);\r\n\r\n                //Server_Controller neu = new Server_Controller();\r\n                /*DataOutputStream outgoing = new DataOutputStream(this.client.getOutputStream()); //Hiermit werden Outputstreams gesendet\r\n                outgoing.writeUTF(speicher); //  Hier werden die Daten in den Outputstream geschrieben\r\n                outgoing.flush(); //Stellt sicher dass alle Daten gesendet werden*/\r\n                OutputStream outServer = client.getOutputStream();\r\n                DataOutputStream out = new DataOutputStream(outServer);\r\n                byte[] buff = speicher.getBytes(\"UTF-8\");\r\n                out.writeInt(buff.length);\r\n                out.write(buff);\r\n                out.flush();\r\n                //client.close();\r\n\r\n                if (this.client.isClosed()) {\r\n\r\n                    incoming.close();  //DataInputStream wird geschlossen\r\n                    //outgoing.close(); //OutPutStream wird geschlossen\r\n                    this.client.close();\r\n\r\n                    this.go = false;\r\n                }\r\n            } catch (Exception e) {\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public void getRequest(String request) {\r\n\r\n        String[] requestArray = request.split(\"/\");\r\n        switch (requestArray[0]) {\r\n            case \"GETSEPS\":\r\n                getSeps();\r\n                return;\r\n            case \"GETUSER\":\r\n                getuser(requestArray[1]);\r\n                return;\r\n            case \"POSTUSER\":\r\n                postuser(requestArray[1]);\r\n                return;\r\n            case \"GETPLAYER\":\r\n                getplayer();\r\n                return;\r\n            case \"UPDATEUSER\":\r\n                updateuser(requestArray[1]);\r\n                return;\r\n            case \"SENDFRIENDINVITE\":\r\n                sendFriendInvite(requestArray[1]);\r\n                return;\r\n            case \"CHECKFORPENDINGFRIENDS\":\r\n                checkForPendingFriends();\r\n                return;\r\n            case \"CHECKFORNONPENDINGFRIENDS\":\r\n                checkForNonPendingFriends();\r\n                return;\r\n            case \"GETTEAMNAMEN\":\r\n                getTeamNamen();\r\n                return;\r\n            case \"ACCEPTFRIEND\":\r\n                accept(requestArray[1]);\r\n                return;\r\n            case \"REMOVEFRIEND\":\r\n                removeFriends(requestArray[1]);\r\n                return;\r\n            case \"DECLINEFRIEND\":\r\n                declineFriend(requestArray[1]);\r\n                return;\r\n            case \"REQUESTEDFRIENDS\":\r\n                checkForRequestedFriends();\r\n                return;\r\n            case \"GETTEAM\":\r\n                getTeam();\r\n                return;\r\n            case \"OPENLOOTBOX\":\r\n                openLootBox(requestArray[1]);\r\n                return;\r\n            case \"OPENSTARTLOOTBOX\":\r\n                openStartLootBox();\r\n                return;\r\n            case \"ADDPLAYERTOSTARTELF\":\r\n                addPlayerToStartElf(requestArray[1], requestArray[2]);\r\n                return;\r\n            case \"GETSTARTELF\":\r\n                getStartElf();\r\n                return;\r\n            case \"BUYSEPS\":\r\n                buySeps();\r\n            //TODO 3\r\n            case \"GETMATCHREQUEST\":\r\n                getMatchRequests();\r\n                return;\r\n            //TODO 2\r\n            case \"GETMATCHHISTORY\":\r\n                getMatchHistory();\r\n                return;\r\n            //TODO 3\r\n            case \"REQUESTMATCH\":\r\n                requestmatch(requestArray[1]);\r\n                return;\r\n            //TODO 3\r\n            case \"ACCEPTMATCH\":\r\n                acceptMatch(requestArray[1]);\r\n                return;\r\n            //TODO 3\r\n            case \"DECLINEMATCHREQUEST\":\r\n                declineMatchRequest(requestArray[1]);\r\n                return;\r\n            //TODO 3\r\n            case \"GETREQUESTEDMATCHES\":\r\n                getRequestedMatches();\r\n                return;\r\n            //TODO 6\r\n            case \"GETASSET\":\r\n                getAssets();\r\n                return;\r\n            //TODO 5\r\n            case \"GETALLTOURNEMENTS\":\r\n                getAllTournements();\r\n                return;\r\n            //TODO 4\r\n            case \"ADDUSERTOTOURNEMENT\":\r\n                addUserToTournement(requestArray[1]);\r\n                return;\r\n            //TODO 4\r\n            case \"GETALLPENDINGTOURNEMENTS\":\r\n                getAllPendingTournements();\r\n                return;\r\n            //TODO 4\r\n            case \"GETALLNONPENDINGTOURNEMENTS\":\r\n                getAllNonPendingTournements();\r\n                return;\r\n            //TODO 4\r\n            case \"GETALLCREATEDTOURNEMENTS\":\r\n                getAllCreatedTournements();\r\n                return;\r\n            //TODO 4\r\n            case \"CREATENEWTOURNEMENT\":\r\n                createNewTournement(requestArray[1]);\r\n                return;\r\n            //TODO 5\r\n            case \"GETMATCHFROMT\":\r\n                getMatchFromT(requestArray[1]);\r\n                return;\r\n            //TODO 6\r\n            case \"UPGRADEASSET\":\r\n                upgradeAsset(requestArray[1], requestArray[2]);\r\n                return;\r\n            //TODO 6\r\n            case \"UPDATEASSET\":\r\n                updateAsset(requestArray[1]);\r\n                return;\r\n            case \"LOGOUT\":\r\n                this.UserID = -1;\r\n                go = false;\r\n                return;\r\n            case \"SELLPLAYER\":\r\n                sellPlayer(requestArray[1]);\r\n        }\r\n\r\n        System.out.println(\"Request nicht erkannt Server.\");\r\n\r\n    }\r\n    //TODO 6\r\n    private void updateAsset(String s) {\r\n        int i = DatabaseController.updateAsset(UserID, s);\r\n        if(i == 1){\r\n            speicher = \"Erfolgreich geändert.\";\r\n        }else{\r\n            speicher = \"Fehler bei der Änderung.\";\r\n        }\r\n\r\n    }\r\n    //TODO 6\r\n    private void upgradeAsset(String s, String cost) {\r\n        User userFromID = DatabaseController.getUserFromID(UserID);\r\n        if (userFromID.getsEPS() < Integer.valueOf(cost)) {\r\n            speicher = \"Zuwenig Seps\";\r\n            return;\r\n        }\r\n        DatabaseController.addSEP(UserID, Integer.valueOf(cost) * (-1));\r\n\r\n        int i = DatabaseController.upgradeAssets(UserID, Integer.parseInt(s));\r\n\r\n        if (i == 1) {\r\n            speicher = \"Erfolgreich verbessert.\";\r\n        } else if (i == -2) {\r\n            speicher = \"Breits auf Maximalstufe.\";\r\n        } else {\r\n            speicher = \"Unerwarteter Server Error.\";\r\n        }\r\n\r\n    }\r\n    //TODO 5\r\n    private void getMatchFromT(String tName) {\r\n        List<MatchWrapper> hallo = DatabaseController.getTMatches(tName);\r\n        speicher = JSONUtilClass.convertMatchWeapperToJSONList(hallo);\r\n    }\r\n\r\n    //TODO 4\r\n    private void getAllCreatedTournements() {\r\n        List<Tournement> allTournements = DatabaseController.getAllTournements();\r\n        allTournements.removeIf(Tournement -> Tournement.getCreatorID() != UserID);\r\n        speicher = JSONUtilClass.convertTournementToJSONList(allTournements);\r\n    }\r\n\r\n    //TODO 4\r\n    private void getAllNonPendingTournements() {\r\n        List<Tournement> allTournements = DatabaseController.getAllTournements();\r\n        allTournements.removeIf(Tournement -> Tournement.isPending());\r\n        allTournements.removeIf(Tournement -> !Tournement.getContestantID().contains(UserID));\r\n        speicher = JSONUtilClass.convertTournementToJSONList(allTournements);\r\n    }\r\n\r\n    //TODO 4\r\n    private void createNewTournement(String s) {\r\n        Tournement tournement = JSONUtilClass.convertFromJSONTournement(s);\r\n        tournement.setCreatorID(UserID);\r\n        tournement.addContestant(UserID);\r\n        tournement.setPending(true);\r\n        int i = DatabaseController.initTournement(tournement);\r\n        if(i == 1){\r\n            DatabaseController.addSEP(UserID,-tournement.getFee());\r\n        }\r\n        speicher = String.valueOf(i);\r\n    }\r\n    private void buySeps() {\r\n\r\n        int seps = DatabaseController.buySeps(this.UserID);\r\n\r\n        if(seps == -1){\r\n            speicher = \"-1\";\r\n        }else{\r\n            speicher = String.valueOf(1000);\r\n        }\r\n    }\r\n\r\n    //TODO 4\r\n    private void getAllPendingTournements() {\r\n\r\n        List<Tournement> allTournements = DatabaseController.getAllTournements();\r\n        allTournements.removeIf(Tournement -> !Tournement.isPending());\r\n        allTournements.removeIf(Tournement -> !Tournement.getContestantID().contains(UserID));\r\n        speicher = JSONUtilClass.convertTournementToJSONList(allTournements);\r\n\r\n    }\r\n\r\n    //TODO 4\r\n    private void addUserToTournement(String tName) {\r\n\r\n        int i = DatabaseController.addUserToTournement(UserID, tName);\r\n        if (i == 2) {\r\n            DatabaseController.beginTournement(tName);\r\n        }\r\n        speicher = String.valueOf(i);\r\n\r\n    }\r\n\r\n    //TODO 5\r\n    private void getAllTournements() {\r\n        List<Tournement> allTournements = DatabaseController.getAllTournements();\r\n        allTournements.removeIf(Tournement -> !Tournement.isPending());\r\n        speicher = JSONUtilClass.convertTournementToJSONList(allTournements);\r\n    }\r\n    //TODO 6\r\n    private void getAssets() {\r\n\r\n        Assets assetFromUser = DatabaseController.getAssetFromUser(UserID);\r\n        speicher = JSONUtilClass.convertToJSONAssets(assetFromUser);\r\n    }\r\n    //TODO 3\r\n    private void getRequestedMatches() {\r\n        List<Match> allRequestedMatches = DatabaseController.getAllRequestedMatches(UserID);\r\n        allRequestedMatches.removeIf(Match -> !Match.isPending());\r\n        ArrayList<User> userList = new ArrayList<>();\r\n        for (Match m : allRequestedMatches) {\r\n            userList.add(DatabaseController.getUserFromID(m.getReceiverUserID()));\r\n        }\r\n        if (allRequestedMatches == null) {\r\n            speicher = \"-1\";\r\n        } else {\r\n            speicher = JSONUtilClass.convertToJSONList(userList, null);\r\n        }\r\n    }\r\n    //TODO 3\r\n    private void declineMatchRequest(String friendName) {\r\n        int i = DatabaseController.declineMatchRequest(UserID, friendName);\r\n        if (i == 1) {\r\n            speicher = \"Erfolgreich gelöscht\";\r\n        } else {\r\n            speicher = \"-1\";\r\n        }\r\n    }\r\n    //TODO 2\r\n    private void acceptMatch(String friendName) {\r\n        int i = DatabaseController.acceptMatchRequest(UserID, friendName);\r\n        if (i == 1) {\r\n            speicher = \"Sie haben gewonnen\";\r\n        } else if (i == -1) {\r\n            speicher = \"Sie haben verloren\";\r\n        } else {\r\n            speicher = \"Sie haben unentschieden gespielt.\";\r\n        }\r\n    }\r\n    //TODO 3\r\n    private void requestmatch(String friendName) {\r\n\r\n        boolean b = DatabaseController.sendMatchRequest(UserID, friendName);\r\n        if (b) {\r\n            speicher = \"1\";\r\n        } else {\r\n            speicher = \"-1\";\r\n        }\r\n    }\r\n    //TODO 2\r\n    private void getMatchHistory() {\r\n\r\n        List<Match> matchHistory = DatabaseController.getMatchHistory(UserID);\r\n        List<MatchWrapper> matchWrapperHistory = new ArrayList<>();\r\n        for (Match m : matchHistory) {\r\n            matchWrapperHistory.add(DatabaseController.matchWrapperFromMatch(m, UserID));\r\n        }\r\n\r\n        String s = JSONUtilClass.convertMatchWeapperToJSONList(matchWrapperHistory);\r\n        speicher = s;\r\n    }\r\n    //TODO 3\r\n    private void getMatchRequests() {\r\n        List<Match> allReceivedMatches = DatabaseController.getAllReceivedMatches(UserID);\r\n        allReceivedMatches.removeIf(Match -> !Match.isPending());\r\n        ArrayList<User> userList = new ArrayList<>();\r\n        for (Match m : allReceivedMatches) {\r\n            User userFromID = DatabaseController.getUserFromID(m.getSenderUserID());\r\n            userFromID.setsEPS(0);\r\n            userFromID.setId(-1);\r\n            userFromID.setPasswort(\"\");\r\n            userList.add(userFromID);\r\n        }\r\n        if (allReceivedMatches == null) {\r\n            speicher = \"-1\";\r\n        } else {\r\n            speicher = JSONUtilClass.convertToJSONList(userList, null);\r\n        }\r\n    }\r\n\r\n    private void getTeamNamen() {\r\n\r\n        String teamNamen = DatabaseController.getTeamNamen(UserID);\r\n        speicher = teamNamen;\r\n    }\r\n\r\n    private void getStartElf() {\r\n        List<Player> startElf = DatabaseController.getStartElf(this.UserID);\r\n        if (startElf == null) {\r\n            speicher = \"-1\";\r\n        } else {\r\n            speicher = JSONUtilClass.convertToJSONList(null, startElf);\r\n        }\r\n    }\r\n\r\n    private void addPlayerToStartElf(String playerListJSON, String lineUp) {\r\n        List<Player> playerList = JSONUtilClass.convertFromJSONPlayerList(playerListJSON);\r\n        DatabaseController.removePlayerToStartElf(this.UserID);\r\n        for (Player p : playerList) {\r\n            if (!DatabaseController.addPlayerToStartElf(this.UserID, p.getId())) {\r\n                speicher = \"-1\";\r\n            }\r\n        }\r\n        if (speicher != \"-1\") {\r\n            speicher = \"1\";\r\n        }\r\n    }\r\n\r\n    private void sellPlayer(String playerID) {\r\n\r\n        int seps = DatabaseController.sellPlayer(this.UserID, Integer.parseInt(playerID));\r\n\r\n        if(seps == -1){\r\n            speicher = \"-1\";\r\n        }else{\r\n            speicher = String.valueOf(seps);\r\n        }\r\n\r\n    }\r\n\r\n    private void openStartLootBox() {\r\n        List<Player> playerList = DatabaseController.openStartLootBox(this.UserID);\r\n        if (playerList == null) {\r\n            speicher = \"-1\";\r\n        } else {\r\n            speicher = JSONUtilClass.convertToJSONList(null, playerList);\r\n        }\r\n    }\r\n\r\n    private void openLootBox(String size) {\r\n        List<Player> playerList = DatabaseController.openLootBox(this.UserID, Integer.parseInt(size));\r\n        if (playerList == null) {\r\n            speicher = \"-1\";\r\n        } else {\r\n            speicher = JSONUtilClass.convertToJSONList(null, playerList);\r\n        }\r\n    }\r\n\r\n    private void getTeam() {\r\n\r\n        List<Player> team = DatabaseController.getTeam(this.UserID);\r\n        if (team == null) {\r\n            speicher = \"-1\";\r\n        } else {\r\n            String playerListJSON = JSONUtilClass.convertToJSONList(null, team);\r\n            speicher = playerListJSON;\r\n        }\r\n\r\n    }\r\n\r\n    private void getSeps() {\r\n\r\n        int seps = DatabaseController.getSeps(this.UserID);\r\n        if (seps == -1) {\r\n            speicher = \"-1\";\r\n        } else {\r\n            speicher = String.valueOf(seps);\r\n        }\r\n    }\r\n\r\n    private void declineFriend(String friendName) {\r\n\r\n        try {\r\n            int Userid = this.UserID;\r\n            int i = DatabaseController.declineRequest(Userid, friendName);\r\n            speicher = String.valueOf(i);\r\n        } catch (Exception e) {\r\n            speicher = \"-6\";\r\n        }\r\n\r\n    }\r\n\r\n    private void updateuser(String s) {\r\n\r\n        User user = JSONUtilClass.convertFromJSONUser(s);\r\n        int check = checkIfUserInDatabase(user);\r\n        if (check == 200) {\r\n            boolean b = DatabaseController.updateUser(user, this.UserID);\r\n            if (b) {\r\n                speicher = \"400\";\r\n            } else {\r\n                speicher = \"401\";\r\n            }\r\n        } else {\r\n            speicher = String.valueOf(check);\r\n        }\r\n\r\n    }\r\n\r\n    private void getplayer() {\r\n        List<Player> playerList = DatabaseController.getPlayer();\r\n        speicher = JSONUtilClass.convertToJSONList(null, playerList);\r\n    }\r\n\r\n    private void sendFriendInvite(String friendName) {\r\n        try {\r\n            int Userid = this.UserID;\r\n            int i = DatabaseController.sendFriendRequest(Userid, friendName);\r\n            speicher = String.valueOf(i);\r\n        } catch (Exception e) {\r\n            speicher = \"-6\";\r\n        }\r\n    }\r\n\r\n    public void checkForPendingFriends() {\r\n        try {\r\n            int Userid = this.UserID;\r\n            List<User> userList = DatabaseController.checkForPendingFriends(Userid);\r\n            for (User u : userList) {\r\n                u.setPasswort(\"\");\r\n                u.setId(0);\r\n            }\r\n            String s = JSONUtilClass.convertToJSONList(userList, null);\r\n            speicher = s;\r\n        } catch (Exception e) {\r\n            speicher = \"-6\";\r\n        }\r\n\r\n    }\r\n\r\n    public void checkForNonPendingFriends() {\r\n        try {\r\n            int Userid = this.UserID;\r\n            List<User> userList = DatabaseController.checkForNoNPendingFriends(Userid);\r\n            for (User u : userList) {\r\n                u.setPasswort(\"\");\r\n                u.setId(0);\r\n            }\r\n            String s = JSONUtilClass.convertToJSONList(userList, null);\r\n            speicher = s;\r\n        } catch (Exception e) {\r\n            speicher = \"-6\";\r\n        }\r\n\r\n    }\r\n\r\n    public void checkForRequestedFriends() {\r\n        try {\r\n            int Userid = this.UserID;\r\n            List<User> userList = DatabaseController.checkForRequestsFriends(Userid);\r\n            for (User u : userList) {\r\n                u.setPasswort(\"\");\r\n                u.setId(0);\r\n            }\r\n            String s = JSONUtilClass.convertToJSONList(userList, null);\r\n            speicher = s;\r\n        } catch (Exception e) {\r\n            speicher = \"-6\";\r\n        }\r\n\r\n    }\r\n\r\n    public void accept(String friendName) {\r\n        try {\r\n            int Userid = this.UserID;\r\n            int i = DatabaseController.acceptRequest(Userid, friendName);\r\n            speicher = String.valueOf(i);\r\n        } catch (Exception e) {\r\n            speicher = \"-6\";\r\n        }\r\n\r\n    }\r\n\r\n    public void removeFriends(String friendName) {\r\n        try {\r\n            int Userid = this.UserID;\r\n            int i = DatabaseController.removeFriend(Userid, friendName);\r\n            speicher = String.valueOf(i);\r\n        } catch (Exception e) {\r\n            speicher = \"-6\";\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void postuser(String userAsJSON) {\r\n        User user = JSONUtilClass.convertFromJSONUser(userAsJSON);\r\n        int i = checkIfUserInDatabase(user);\r\n        if (i == 200) {\r\n            boolean saved = DatabaseController.saveUser(user);\r\n            User userWithName = DatabaseController.findUserWithName(user.getUserName());\r\n            System.out.println(userWithName);\r\n            DatabaseController.openStartLootBox(userWithName.getId());\r\n            DatabaseController.initAssets(userWithName.getId());\r\n            if (saved) {\r\n                speicher = \"204\";\r\n            } else {\r\n                speicher = \"205\";\r\n            }\r\n        } else {\r\n            speicher = String.valueOf(i);\r\n        }\r\n\r\n    }\r\n\r\n    private int checkIfUserInDatabase(User userToCheck) {\r\n        List<User> userList = DatabaseController.getUser();\r\n        for (User user : userList) {\r\n            if (userToCheck.getUserName() != null) {\r\n                if (userToCheck.getUserName().equals(user.getUserName())) {\r\n                    return 404;\r\n                }\r\n            }\r\n            if (userToCheck.geteMail() != null) {\r\n                if (userToCheck.geteMail().equals(user.geteMail())) {\r\n                    return 406;\r\n                }\r\n            }\r\n        }\r\n        return 200;\r\n    }\r\n\r\n\r\n    private void getuser(String userAsJSON) {\r\n        User userToCheck = JSONUtilClass.convertFromJSONUser(userAsJSON);\r\n        System.out.println(userToCheck);\r\n        List<User> userList = DatabaseController.getUser();\r\n        for (User user : userList) {\r\n            if (userToCheck.getUserName().equals(user.getUserName()) && userToCheck.getPasswort().equals(user.getPasswort())) {\r\n                this.UserID = user.getId();\r\n                speicher = \"1\";\r\n                return;\r\n            }\r\n        }\r\n        speicher = \"-1\";\r\n    }\r\n\r\n}\r\n 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Server/Server_Socket_Handler.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/main/java/Server/Server_Socket_Handler.java	(date 1593967753724)
@@ -122,7 +122,7 @@
                 return;
             case "BUYSEPS":
                 buySeps();
-            //TODO 3
+                //TODO 3
             case "GETMATCHREQUEST":
                 getMatchRequests();
                 return;
@@ -197,16 +197,18 @@
         System.out.println("Request nicht erkannt Server.");
 
     }
+
     //TODO 6
     private void updateAsset(String s) {
         int i = DatabaseController.updateAsset(UserID, s);
-        if(i == 1){
+        if (i == 1) {
             speicher = "Erfolgreich geändert.";
-        }else{
+        } else {
             speicher = "Fehler bei der Änderung.";
         }
 
     }
+
     //TODO 6
     private void upgradeAsset(String s, String cost) {
         User userFromID = DatabaseController.getUserFromID(UserID);
@@ -227,6 +229,7 @@
         }
 
     }
+
     //TODO 5
     private void getMatchFromT(String tName) {
         List<MatchWrapper> hallo = DatabaseController.getTMatches(tName);
@@ -255,18 +258,19 @@
         tournement.addContestant(UserID);
         tournement.setPending(true);
         int i = DatabaseController.initTournement(tournement);
-        if(i == 1){
-            DatabaseController.addSEP(UserID,-tournement.getFee());
+        if (i == 1) {
+            DatabaseController.addSEP(UserID, -tournement.getFee());
         }
         speicher = String.valueOf(i);
     }
+
     private void buySeps() {
 
         int seps = DatabaseController.buySeps(this.UserID);
 
-        if(seps == -1){
+        if (seps == -1) {
             speicher = "-1";
-        }else{
+        } else {
             speicher = String.valueOf(1000);
         }
     }
@@ -298,12 +302,14 @@
         allTournements.removeIf(Tournement -> !Tournement.isPending());
         speicher = JSONUtilClass.convertTournementToJSONList(allTournements);
     }
+
     //TODO 6
     private void getAssets() {
 
         Assets assetFromUser = DatabaseController.getAssetFromUser(UserID);
         speicher = JSONUtilClass.convertToJSONAssets(assetFromUser);
     }
+
     //TODO 3
     private void getRequestedMatches() {
         List<Match> allRequestedMatches = DatabaseController.getAllRequestedMatches(UserID);
@@ -318,6 +324,7 @@
             speicher = JSONUtilClass.convertToJSONList(userList, null);
         }
     }
+
     //TODO 3
     private void declineMatchRequest(String friendName) {
         int i = DatabaseController.declineMatchRequest(UserID, friendName);
@@ -327,17 +334,16 @@
             speicher = "-1";
         }
     }
+
     //TODO 2
     private void acceptMatch(String friendName) {
-        int i = DatabaseController.acceptMatchRequest(UserID, friendName);
-        if (i == 1) {
-            speicher = "Sie haben gewonnen";
-        } else if (i == -1) {
-            speicher = "Sie haben verloren";
-        } else {
-            speicher = "Sie haben unentschieden gespielt.";
+        Match matchFromName = DatabaseController.getMatchFromName(UserID, friendName);
+        Match match = DatabaseController.acceptMatchRequest(matchFromName);
+        if(match != null){
+            speicher = "Match Erfolgreich gespielt.";
         }
     }
+
     //TODO 3
     private void requestmatch(String friendName) {
 
@@ -348,6 +354,7 @@
             speicher = "-1";
         }
     }
+
     //TODO 2
     private void getMatchHistory() {
 
@@ -360,6 +367,7 @@
         String s = JSONUtilClass.convertMatchWeapperToJSONList(matchWrapperHistory);
         speicher = s;
     }
+
     //TODO 3
     private void getMatchRequests() {
         List<Match> allReceivedMatches = DatabaseController.getAllReceivedMatches(UserID);
@@ -411,9 +419,9 @@
 
         int seps = DatabaseController.sellPlayer(this.UserID, Integer.parseInt(playerID));
 
-        if(seps == -1){
+        if (seps == -1) {
             speicher = "-1";
-        }else{
+        } else {
             speicher = String.valueOf(seps);
         }
 
Index: src/main/java/Server/DatabaseController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport Client.HelperClass;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.Transaction;\r\n\r\nimport java.util.*;\r\n\r\npublic class DatabaseController {\r\n\r\n    public static List<Player> getPlayer() {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Player> everyPlayer = session.createQuery(\"FROM Player\").list();\r\n            return everyPlayer;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public static Player getPlayerFromID(int id) {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Player> everyPlayer = session.createQuery(\"FROM Player where id =\" + id).list();\r\n            return everyPlayer.get(0);\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n\r\n        //!ist aktuell Langsam!\r\n    \t/*int i =0;\r\n    \tif(getPlayer() == null) return null;\r\n    \twhile(getPlayer().get(i).getId() != id) i++;\r\n\t\treturn getPlayer().get(i);*/\r\n    }\r\n\r\n    public static List<Player> getPlayerSorted() {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Player> everyPlayer = session.createQuery(\"FROM Player p ORDER BY p.screachResults ASC\").list();\r\n            return everyPlayer;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean updatePlayers(Player newplayer) {\r\n\r\n        Player playerToUpdate;\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            playerToUpdate = session.get(Player.class, newplayer.getId());\r\n            playerToUpdate.update(newplayer);\r\n            session.update(playerToUpdate);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean updateUser(User newUser, int id) {\r\n        User userToUpdate;\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            userToUpdate = session.get(User.class, id);\r\n            userToUpdate.update(newUser, false);\r\n            System.out.println(userToUpdate);\r\n            session.update(userToUpdate);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean Lootboxen(User newUser, int id) {\r\n\r\n        User userToUpdate;\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            userToUpdate = session.get(User.class, id);\r\n            userToUpdate.update(newUser, true);\r\n            System.out.println(userToUpdate);\r\n            session.update(userToUpdate);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static List<User> getUser() {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<User> everyUser = session.createQuery(\"FROM User\").list();\r\n            return everyUser;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean saveUser(User user) {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            user.setsEPS(1000);\r\n            session.save(user);\r\n            return true;\r\n\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static boolean addPlayerTooDatabase(Player player) {\r\n\r\n        String[] split = player.getPos().split(\"-\");\r\n        player.setPos(split[0]);\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            session.save(player);\r\n            transaction.commit();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static int sendFriendRequest(int currentUserID, String friendsName) {\r\n\r\n        User userToSendTo = findUserWithName(friendsName);\r\n        if (userToSendTo == null) {\r\n            return -4;\r\n        }\r\n        if (userToSendTo.getId() == currentUserID) {\r\n            return -5;\r\n        }\r\n        List<User> userList = checkForNoNPendingFriends(currentUserID);\r\n        List<User> userList1 = checkForPendingFriends(currentUserID);\r\n\r\n        if (userList != null) {\r\n            if (userList.contains(userToSendTo)) {\r\n                return -7;\r\n            }\r\n        }\r\n        if (userList1 != null) {\r\n            if (userList1.contains(userToSendTo)) {\r\n                acceptRequest(currentUserID, friendsName);\r\n                return 2;\r\n            }\r\n        }\r\n        return setUserToPending(checkIfUserIsInDatabase(currentUserID), userToSendTo);\r\n    }\r\n\r\n    private static int setUserToPending(User checkIfUserIsInDatabase, User userToSendTo) {\r\n\r\n        FriendsList friendsList = new FriendsList(checkIfUserIsInDatabase.getId(), userToSendTo.getId(), true);\r\n        List<FriendsList> friendsList2 = getFriendsList();\r\n        for (FriendsList f : friendsList2) {\r\n            if (f.equals(friendsList)) {\r\n                return -1;\r\n            }\r\n        }\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            session.save(friendsList);\r\n            transaction.commit();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -2;\r\n        }\r\n    }\r\n\r\n    private static List<FriendsList> getFriendsList() {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<FriendsList> everyPlayer = session.createQuery(\"FROM FriendsList \").list();\r\n            return everyPlayer;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private static FriendsList findFriendsList(int idUser, int idFriend) {\r\n\r\n        List<FriendsList> friendsList = getFriendsList();\r\n        FriendsList newf = new FriendsList(idUser, idFriend);\r\n        if (friendsList == null) return null;\r\n        for (FriendsList f : friendsList) {\r\n            if (f.equals(newf)) {\r\n                return f;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static int acceptRequest(int currentUserID, String friendsName) {\r\n\r\n        User friend = findUserWithName(friendsName); // Freund in Datenank finden und in VAriable friend speichern --> Zugriff auf freunds user id (friend.id)\r\n        if (friend == null) { // Sollte Freund nicht existieren, weil hat sich  gel�scht, Fehler meldung zur�ckgeben: \"Benutzer nicht gefunden\"\r\n            return -2;\r\n        }\r\n        FriendsList friendsList1 = findFriendsList(friend.id, currentUserID); // Eintrag in der Freundesliste des Freundes suchen und in friendlist1 abspeichern \r\n        FriendsList friendsList = new FriendsList(currentUserID, friend.getId(), false); // Neues Eintrag generien\r\n        if (addFriend(friendsList)) { // Eintrag in DAtenbank abspeichern\r\n            boolean check = updateFriendsList(friendsList1, false); // Eintrag der Freundeslistes des Feundes wird aktualisert /von true auf false, weil Freundschaftsanfrage angenommen\r\n            if (check) {\r\n                return 1; //Erfolreich aktzeptiert\r\n            } else {\r\n                removeFriendList(friendsList); // Eintrag loeschen, weil z.B.: Eintrag exisiterit schon\r\n                return -1; //Fehlermeldung\r\n            }\r\n        } else {\r\n            return -1; // Fehlermeldung, wenn z.B.: Eintrag schon exisiert \r\n        }\r\n    }\r\n\r\n    public static int declineRequest(int currentUserID, String friendsName) {\r\n\r\n        User friend = findUserWithName(friendsName);\r\n        if (friend == null) {\r\n            return -2;\r\n        }\r\n        FriendsList friendsList1 = findFriendsList(friend.id, currentUserID);\r\n        boolean b = removeFriendList(friendsList1);\r\n        if (b) {\r\n            return 1;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    private static boolean addFriend(FriendsList friendsList) {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            session.save(friendsList);\r\n            transaction.commit();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private static boolean updateFriendsList(FriendsList friendsList, boolean b) {\r\n\r\n        FriendsList friendsListToUpdate;\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            friendsListToUpdate = session.get(FriendsList.class, friendsList.id);\r\n            friendsListToUpdate.update(b);\r\n            session.update(friendsListToUpdate);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static List<User> checkForPendingFriends(int currentUserID) {\r\n\r\n        List<FriendsList> allFriends = getFriendsList();\r\n        if (allFriends == null) return null;\r\n        allFriends.removeIf(friendsList -> friendsList.getUserFriendId() != currentUserID);\r\n        allFriends.removeIf(friendsList -> friendsList.isPending() == false);\r\n        return getCurrentUserFromFriendList(allFriends);\r\n    }\r\n\r\n    public static List<User> checkForNoNPendingFriends(int currentUserID) {\r\n\r\n        List<FriendsList> allFriends = getFriendsList();\r\n        if (allFriends == null) return null;\r\n        allFriends.removeIf(friendsList -> friendsList.getUserFriendId() != currentUserID);\r\n        allFriends.removeIf(friendsList -> friendsList.isPending() != false);\r\n        return getCurrentUserFromFriendList(allFriends);\r\n    }\r\n\r\n    public static List<User> checkForRequestsFriends(int currentUserID) {\r\n\r\n        List<FriendsList> allFriends = getFriendsList();\r\n        if (allFriends == null) return null;\r\n        allFriends.removeIf(friendsList -> friendsList.getCurrentUserId() != currentUserID);\r\n        allFriends.removeIf(friendsList -> friendsList.isPending() != true);\r\n        return getFriendUserFromFriendList(allFriends);\r\n    }\r\n\r\n    private static List<User> getCurrentUserFromFriendList(List<FriendsList> friendsList) {\r\n\r\n        List<User> userList = new ArrayList<>();\r\n        for (FriendsList list : friendsList) {\r\n            userList.add(checkIfUserIsInDatabase(list.getCurrentUserId()));\r\n        }\r\n        return userList;\r\n    }\r\n\r\n    private static List<User> getFriendUserFromFriendList(List<FriendsList> friendsList) {\r\n\r\n        List<User> userList = new ArrayList<>();\r\n        for (FriendsList list : friendsList) {\r\n            userList.add(checkIfUserIsInDatabase(list.getUserFriendId()));\r\n        }\r\n        return userList;\r\n    }\r\n\r\n    private static User checkIfUserIsInDatabase(int userID) {\r\n\r\n        List<User> userList = getUser();\r\n        if (userList == null) return null;\r\n        for (User user : userList) {\r\n            if (user.getId() == userID) {\r\n                return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static User findUserWithName(String name) {\r\n\r\n        List<User> userList = getUser();\r\n        if (userList == null) return null;\r\n        for (User user : userList) {\r\n            if (user.getUserName().equals(name)) {\r\n                return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static int removeFriend(int currentUserID, String friendsName) {\r\n\r\n        User userWithName = findUserWithName(friendsName);\r\n        if (userWithName == null) {\r\n            return -2;\r\n        }\r\n        FriendsList friendsList = findFriendsList(currentUserID, userWithName.id);\r\n        FriendsList friendsList1 = findFriendsList(userWithName.id, currentUserID);\r\n        if (friendsList == null || friendsList1 == null) {\r\n            return -1;\r\n        }\r\n        if (removeFriendList(friendsList) && removeFriendList(friendsList1)) {\r\n            return 1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    private static boolean removeFriendList(FriendsList friendsList) {\r\n\r\n        FriendsList friendsListToDelete;\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            friendsListToDelete = session.get(FriendsList.class, friendsList.getId());\r\n            session.remove(friendsListToDelete);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static int getSeps(int userID) {\r\n\r\n        User user = checkIfUserIsInDatabase(userID);\r\n        if (user == null) return -1;\r\n        return user.getsEPS();\r\n    }\r\n\r\n    private static List<Team> getAllTeams() {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Team> everyTeam = session.createQuery(\"FROM Team\").list();\r\n            return everyTeam;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n    public static List<Player> getTeam(int userID) {\r\n\r\n        User user = checkIfUserIsInDatabase(userID);\r\n        List<Player> allPlayerInTeam = new ArrayList<>();\r\n        if (user == null) {\r\n            return null;\r\n        } else {\r\n            List<Team> allTeams = getAllTeams();\r\n            if (allTeams == null) return null;\r\n            allTeams.removeIf(team -> team.getUserID() != userID);\r\n            for (Team team : allTeams) {\r\n                Player playerFromTeam = getPlayerFromTeam(team.getPlayerID());\r\n                if (playerFromTeam != null) {\r\n                    allPlayerInTeam.add(playerFromTeam);\r\n                }\r\n            }\r\n            return allPlayerInTeam;\r\n        }\r\n    }\r\n\r\n    private static Player getPlayerFromTeam(int playerID) {\r\n\r\n        List<Player> playerList = getPlayer();\r\n        if (playerList == null) return null;\r\n        for (Player p : playerList) {\r\n            if (p.getId() == playerID) {\r\n                return p;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean addPlayerToTeam(Team newTeam) {\r\n\r\n        List<Team> allTeams = getAllTeams();\r\n        if (allTeams == null) return false;\r\n        for (Team t : allTeams) {\r\n            if (t.equals(newTeam)) {\r\n                return false;\r\n            }\r\n        }\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            newTeam.setStartElf(false);\r\n            session.save(newTeam);\r\n            transaction.commit();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n    public static int buySeps (int userID){\r\n\r\n        //Gibt dem Nutzer +1000SEPS (zurzeit ohne kosten/limit)\r\n        User user = checkIfUserIsInDatabase(userID);\r\n        if (user == null) return 0;\r\n\r\n        int newSEPS = user.getsEPS()+1000;\r\n        if (newSEPS <= 0) return 0;\r\n        user.setsEPS(newSEPS);\r\n        Lootboxen(user,userID);\r\n        return newSEPS;\r\n    }\r\n\r\n    public static int sellPlayer(int userID, int playerID) {\r\n\r\n        //Entfernt Spieler aus Team, fügt SEPS in höhe der Stärke hinzu\r\n        User user = checkIfUserIsInDatabase(userID);\r\n        if (user == null) return 0;\r\n        if(getPlayerFromID(playerID)==null)return 0;\r\n\r\n        double playerstaerke = getPlayerFromID(playerID).getGesamtStaerke();\r\n        int newSEPS = user.getsEPS()+ (int)playerstaerke;\r\n        if (newSEPS <= 0) return 0;\r\n        user.setsEPS(newSEPS);\r\n        Lootboxen(user,userID);\r\n        deletePlayer(playerID);\r\n        return newSEPS;\r\n    }\r\n\r\n    public static boolean addPlayerToTeam2(Team newTeam) {\r\n\r\n        List<Team> allTeams = getAllTeams();\r\n        if (allTeams == null) return false;\r\n        for (Team t : allTeams) {\r\n            if (t.equals(newTeam)) {\r\n                return false;\r\n            }\r\n        }\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            newTeam.setStartElf(true);\r\n            session.save(newTeam);\r\n            transaction.commit();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    public static List<Player> openLootBox(int userID, int AnzahlBoxen) {\r\n\r\n        //Test ob Nutzer exestiert & ob sich die Boxen leisten kann\r\n        User user = checkIfUserIsInDatabase(userID);\r\n        if (user == null) return null;\r\n        int newSEPS = user.getsEPS() - (AnzahlBoxen * 100);\r\n        if (newSEPS < 0) return null;\r\n\r\n        //Wenn ja aktualisiere SEPstand & erstelle Liste wo die gezogenen Spieler rein kommen\r\n        user.setsEPS(newSEPS);\r\n        Lootboxen(user, userID);\r\n        List<Player> playerList = new ArrayList<>();\r\n        if (user == null) {\r\n            return null;\r\n        }\r\n        // Generiere Spieler und füge sie der Liste hinzu\r\n        for (int i = 0; i < AnzahlBoxen; i++) {\r\n            Player player = getRandomPlayer();\r\n            while(player == null) player = getRandomPlayer();\r\n            playerList.add(player);\r\n            addPlayerToTeam(new Team(userID, player.getId()));\r\n        }\r\n        for (Player p:playerList) {\r\n            Team team = new Team(userID, p.getId());\r\n            addPlayerToTeam(team);\r\n        }\r\n        return playerList;\r\n    }\r\n\r\n    public static List<Player> openStartLootBox(int userID) {\r\n\r\n        //Standard Test ob User exestiert und nicht null ist\r\n        User user = checkIfUserIsInDatabase(userID);\r\n        if (user == null) return null;\r\n\r\n        //Erstellen einer Liste für jede Position\r\n        List<Player> playerList = new ArrayList<>();\r\n        if (user == null) return null;\r\n        List<Player> TWplayerList = new ArrayList<>();\r\n        List<Player> DEFplayerList = new ArrayList<>();\r\n        List<Player> MFplayerList = new ArrayList<>();\r\n        List<Player> FWplayerList = new ArrayList<>();\r\n        List<Player> player = getPlayer();\r\n        if(player == null) return null;\r\n\r\n        //Verteilen der Spieler in die Listen mit der passenden Position\r\n        for (Player p : player) {\r\n            if (p.getPos().contains(\"DF\")) {\r\n                DEFplayerList.add(p);\r\n            } else if (p.getPos().contains(\"TW\")) {\r\n                TWplayerList.add(p);\r\n            } else if (p.getPos().contains(\"MF\")) {\r\n                MFplayerList.add(p);\r\n            } else if (p.getPos().contains(\"FW\")) {\r\n                FWplayerList.add(p);\r\n            }\r\n        }\r\n        for (int i = 0; i < 100; i++) {\r\n            try {\r\n                playerList.addAll(TWORandomPlayer(TWplayerList));\r\n                playerList.addAll(TWORandomPlayer(DEFplayerList));\r\n                playerList.addAll(TWORandomPlayer(DEFplayerList));\r\n                playerList.addAll(TWORandomPlayer(DEFplayerList));\r\n                playerList.addAll(TWORandomPlayer(MFplayerList));\r\n                playerList.addAll(TWORandomPlayer(MFplayerList));\r\n                playerList.addAll(TWORandomPlayer(MFplayerList));\r\n                playerList.addAll(TWORandomPlayer(MFplayerList));\r\n                playerList.addAll(TWORandomPlayer(MFplayerList));\r\n                playerList.addAll(TWORandomPlayer(FWplayerList));\r\n                playerList.addAll(TWORandomPlayer(DEFplayerList, FWplayerList));\r\n                if (playerList.size() == 22) {\r\n                    for (int j = 0; j < playerList.size(); j++) {\r\n                        for (int j2 = 0; j2 < playerList.size(); j2++) {\r\n                            if (playerList.get(j).equals(playerList.get(j2)) && j != j2) {\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            } catch (NullPointerException e) {\r\n\r\n            }\r\n        }\r\n        if (playerList.size() != 22) {\r\n            return null;\r\n        }\r\n        for (Player p : playerList) {\r\n            addPlayerToTeam(new Team(userID, p.getId()));\r\n        }\r\n        return playerList;\r\n    }\r\n    public static void removeDrafted (List<Player> PlayerList1, List<Player> PlayerList2){\r\n        List<Player> drafted = TWORandomPlayer(PlayerList1);\r\n        PlayerList1.removeAll(drafted);\r\n        PlayerList2.addAll(drafted);\r\n    }\r\n\r\n    public static List<Player> TWORandomPlayer(List<Player> playerlist, List<Player> playerlist21) {\r\n        int j = 100;\r\n        List<Player> playerList2 = new ArrayList<>();\r\n        List<Player> playerList3 = new ArrayList<>();\r\n        Random random = new Random();\r\n        Player player = playerlist.get(random.nextInt(playerlist.size()));\r\n        for (int i = 0; i < 100; i++) {\r\n            int strength = j - (int)player.getGesamtStaerke();\r\n            for (Player p : playerlist21) {\r\n                if (p.getGesamtStaerke() == strength) {\r\n                    playerList2.add(p);\r\n                }\r\n            }\r\n            if (!playerList2.isEmpty()) {\r\n                break;\r\n                //Wenn es keinen Spiler mit exakt der gesuchten Särke gibt nehemen +/- 1 Stärke\r\n            } else {\r\n                if (strength > 50) {\r\n                    j--;\r\n                } else {\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n        //Wählen den 2. Zufälligen Spieler und fügen beide Spieler der List3 hinzu\r\n        Player player2 = playerList2.get(random.nextInt(playerList2.size()));\r\n        playerList3.add(player);\r\n        playerList3.add(player2);\r\n        return playerList3;\r\n    }\r\n\r\n    public static List<Player> TWORandomPlayer(List<Player> playerlist) {\r\n\r\n        int j = 100;\r\n        List<Player> playerList2 = new ArrayList<>();\r\n        List<Player> playerList3 = new ArrayList<>();\r\n        Random random = new Random();\r\n        Player player = playerlist.get(random.nextInt(playerlist.size()));\r\n        for (int i = 0; i < 100; i++) {\r\n            int strength = (int) (j - player.getGesamtStaerke());\r\n            for (Player p : playerlist) {\r\n                if ((int)p.getGesamtStaerke() == strength) {\r\n                    playerList2.add(p);\r\n                }\r\n            }\r\n            if (!playerList2.isEmpty()) {\r\n                break;\r\n            } else {\r\n                if (strength > 50) {\r\n                    j--;\r\n                } else {\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n        Player player2 = playerList2.get(random.nextInt(playerList2.size()));\r\n        playerList3.add(player);\r\n        playerList3.add(player2);\r\n        return playerList3;\r\n    }\r\n\r\n    public static Player getCounterPartPlayer(int gesamtStärke) {\r\n        List<Player> playerList2 = new ArrayList<>();\r\n        int stärkeToHave = 100 - gesamtStärke;\r\n        List<Player> player = getPlayer();\r\n        if(player==null) return null;\r\n        for (Player p : player) {\r\n            if (p.getGesamtStaerke() == stärkeToHave) {\r\n                playerList2.add(p);\r\n            }\r\n        }\r\n        Random random = new Random();\r\n        return playerList2.get(random.nextInt(playerList2.size()));\r\n    }\r\n\r\n    public static Player getRandomPlayer() {\r\n\r\n        List<Player> player = getPlayer();\r\n        Random random = new Random();\r\n        if (player == null) return null;\r\n        return player.get(random.nextInt(player.size()));\r\n    }\r\n\r\n    public static boolean addPlayerToStartElf(int userID, int playerID) {\r\n\r\n        List<Team> allTeams = getAllTeams();\r\n        if (allTeams == null) return false;\r\n        allTeams.removeIf(team -> team.getUserID() != userID);\r\n        for (Team t : allTeams) {\r\n            if (t.getPlayerID() == playerID) {\r\n                return updateTeam(t, true);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean deletePlayer(int playerID) {\r\n\r\n        Player playerToDelete;\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            playerToDelete = session.get(Player.class, playerID);\r\n            session.remove(playerToDelete);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static boolean removePlayerToStartElf(int userID) {\r\n\r\n        List<Team> allTeams = getAllTeams();\r\n        allTeams.removeIf(team -> team.getUserID() != userID);\r\n        for (Team t : allTeams) {\r\n            updateTeam(t, false);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static boolean updateTeam(Team t, boolean b) {\r\n\r\n        Team TeamToUpdate;\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            TeamToUpdate = session.get(Team.class, t.id);\r\n            TeamToUpdate.setStartElf(b);\r\n            session.update(TeamToUpdate);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return true;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static List<Player> getStartElf(int userID) {\r\n\r\n        List<Team> allTeams = getAllTeams();\r\n        if (allTeams == null) return null;\r\n        List<Player> playerList = new ArrayList<>();\r\n        allTeams.removeIf(team -> team.getUserID() != userID);\r\n        for (Team t : allTeams) {\r\n            if (t.getStartElf()) {\r\n                playerList.add(getPlayerFromTeam(t.getPlayerID()));\r\n            }\r\n        }\r\n        return playerList;\r\n    }\r\n\r\n    public static String getTeamNamen(int userID) {\r\n\r\n        List<User> user = getUser();\r\n        if (user == null) return null;\r\n        for (User u : user) {\r\n            if (u.getId() == userID) {\r\n                String s = u.getTeamName();\r\n                if (s == null) {\r\n                    return \"Noch kein Name Vergeben\";\r\n                } else {\r\n                    return s;\r\n                }\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    public static boolean sendMatchRequest(int userID, String friendName) {\r\n        int friendID = findUserWithName(friendName).id;\r\n        List<Match> allRequestedMatches = getAllRequestedMatches(userID);\r\n        List<Match> allRequestedMatchesFriend = getAllRequestedMatches(friendID);\r\n\r\n        for (Match match : allRequestedMatches) {\r\n            if (match.pending && match.receiverUserID == friendID) {\r\n                System.out.println(\"Already requested\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (Match match : allRequestedMatchesFriend) {\r\n            if (match.pending && match.receiverUserID == userID) {\r\n                System.out.print(\"Already requested, Played match: \\t\");\r\n                int i = acceptMatchRequest(userID, friendName);\r\n                System.out.println(i);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        List<User> userList = checkForNoNPendingFriends(userID);\r\n        User user = checkIfUserIsInDatabase(friendID);\r\n        if (user == null) {\r\n            System.out.println(\"FriendUser Not in Database\");\r\n            return false;\r\n        }\r\n        if (userList.contains(user)) {\r\n            Match match = new Match(userID, friendID);\r\n            addMatch(match);\r\n            return true;\r\n        }\r\n        System.out.println(\"Friend not in FriendsList\");\r\n        return false;\r\n    }\r\n\r\n    private static void addMatch(Match match) {\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            session.save(match);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n    }\r\n\r\n    public static List<Match> getAllRequestedMatches(int userID) {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Match> everyUser = session.createQuery(\"FROM Match where senderUserID = \" + userID).list();\r\n            return everyUser;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n    public static List<Match> getAllReceivedMatches(int userID) {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Match> everyUser = session.createQuery(\"FROM Match where receiverUserID = \" + userID).list();\r\n            return everyUser;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n    public static int acceptMatchRequest(int userID, String friendName) {\r\n        User userWithName = findUserWithName(friendName);\r\n        int friendID = userWithName.id;\r\n        List<Match> allReceivedMatches = getAllReceivedMatches(userID);\r\n        Match currentMatch = null;\r\n        for (Match match : allReceivedMatches) {\r\n            if (match.senderUserID == friendID) {\r\n                if (match.pending) {\r\n                    currentMatch = match;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (currentMatch == null) {\r\n            return -2;\r\n        }\r\n        List<Player> startElfUser = getStartElf(userID);\r\n        List<Player> startElfFriend = getStartElf(friendID);\r\n\r\n        if (startElfUser.size() < 11 || startElfFriend.size() < 11) {\r\n            System.out.println(\"Startelf nicht vorhanden\");\r\n            return -1;\r\n        }\r\n\r\n        String lineup = identLineUp(startElfUser);\r\n        String lineupfriend = identLineUp(startElfFriend);\r\n\r\n        //int lineUpBonus = getLineUpBonus(lineup, lineupfriend);\r\n\r\n        //int durchschnittStärkeTeam = getDurchschnittStärkeTeam(startElfUser, startElfFriend, lineup, lineupfriend);\r\n\r\n        //int mfDurchschnitt = getMFDurchschnittStärke(startElfUser, startElfFriend, lineup, lineupfriend);\r\n\r\n        List<Player> team = getTeam(userID);\r\n        List<Player> team1 = getTeam(friendID);\r\n\r\n        //int benchStrength = getChipsaStrength(team, team1);\r\n\r\n        //int pairs = getPairStrength(startElfUser, startElfFriend);\r\n\r\n        //int randomLottery = getRandomLottery();\r\n\r\n        Random random = new Random();\r\n        int amount = random.nextInt(1);\r\n        if (amount == 0) {\r\n            if (!heimSpiel(userID)) {\r\n                System.out.println(\"User hat keine Assets\");\r\n                return -1;\r\n            }\r\n        } else {\r\n            if (!heimSpiel(friendID)) {\r\n                System.out.println(\"Friend hat keine Assets\");\r\n                return -1;\r\n            }\r\n        }\r\n        amount = random.nextInt(5);\r\n        ArrayList<Integer> gameList = new ArrayList<>();\r\n\r\n        for (int i = 0; i < amount; i++) {\r\n            gameList.add(i);\r\n        }\r\n\r\n        int helper = 0;\r\n        int resultUser = 0;\r\n        int resultFriend = 0;\r\n\r\n        for (int i = 0; i < amount; i++) {\r\n\r\n            int gameID = random.nextInt(gameList.size());\r\n\r\n            switch (gameID) {\r\n                case 0:\r\n                    helper = getLineUpBonus(lineup, lineupfriend);\r\n                    System.out.println(\"Game Played: LineUp.\");\r\n                    if (helper > 0) {\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        resultFriend++;\r\n                    } else {\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    helper = getDurchschnittStärkeTeam(startElfUser, startElfFriend, lineup, lineupfriend);\r\n                    System.out.println(\"Game Played: getDurchschnittStärkeTeam.\");\r\n\r\n                    if (helper > 0) {\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        resultFriend++;\r\n                    } else {\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    helper = getMFDurchschnittStärke(startElfUser, startElfFriend, lineup, lineupfriend);\r\n                    System.out.println(\"Game Played: getMFDurchschnittStärke.\");\r\n\r\n                    if (helper > 0) {\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        resultFriend++;\r\n                    } else {\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"Game Played: getChipsaStrength.\");\r\n\r\n                    helper = getChipsaStrength(team, team1);\r\n                    if (helper > 0) {\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        resultFriend++;\r\n                    } else {\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    System.out.println(\"Game Played: getPairStrength.\");\r\n\r\n                    helper = getPairStrength(startElfUser, startElfFriend);\r\n                    if (helper > 0) {\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        resultFriend++;\r\n                    } else {\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    System.out.println(\"Game Played: getRandomLottery.\");\r\n\r\n                    helper = getRandomLottery();\r\n                    if (helper > 0) {\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        resultFriend++;\r\n                    } else {\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            gameList.removeIf(integer -> integer == gameID);\r\n\r\n        }\r\n\r\n\r\n        User userFromID = getUserFromID(userID);\r\n        if(userFromID.getTeamName().equals(\"Rot-Weiss Essen\") && (resultUser < resultFriend || resultUser == resultFriend)){\r\n            resultUser = resultFriend + random.nextInt(3) + 1;\r\n        }else if(userWithName.getTeamName().equals(\"Rot-Weiss Essen\") && (resultUser > resultFriend || resultUser == resultFriend)){\r\n            resultFriend = resultUser + random.nextInt(3) + 1;\r\n        }\r\n\r\n        if (resultUser > resultFriend) {\r\n            System.out.println(getUserFromID(userID).teamName + \" gewinnt:\\t\" + resultUser + \" - \" + resultFriend);\r\n            addSEP(userID, 100);\r\n            removePendingFromMatch(currentMatch, userID + \":\" + resultUser + \":\" + friendID + \":\" +resultFriend);\r\n            return 1;\r\n        } else if (resultUser < resultFriend) {\r\n            System.out.println(getUserFromID(friendID).teamName + \"gewinnt:\\t\" + resultUser + \" - \" + resultFriend);\r\n            addSEP(friendID, 100);\r\n            removePendingFromMatch(currentMatch, userID + \":\" + resultUser + \":\" + friendID + \":\" +resultFriend);\r\n            return -1;\r\n        } else {\r\n            System.out.println(\"Unentschieden: \\t\" + resultUser + \" - \" + resultFriend);\r\n            removePendingFromMatch(currentMatch, userID + \":\" + resultUser + \":\" + friendID + \":\" +resultFriend);\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    public static Match acceptMatchRequest(Match match) {\r\n        int userID = match.getSenderUserID();\r\n        int friendID = match.getReceiverUserID();\r\n\r\n        User user = getUserFromID(userID);\r\n        User friend = getUserFromID(friendID);\r\n\r\n        List<Player> startElfUser = getStartElf(userID);\r\n        List<Player> startElfFriend = getStartElf(friendID);\r\n\r\n\r\n        String lineup = identLineUp(startElfUser);\r\n        String lineupfriend = identLineUp(startElfFriend);\r\n\r\n        List<Player> team = getTeam(userID);\r\n        List<Player> team1 = getTeam(friendID);\r\n\r\n        Random random = new Random();\r\n        int amount = random.nextInt(1);\r\n        if (amount == 0) {\r\n            if (!heimSpiel(userID)) {\r\n                System.out.println(\"User hat keine Assets\");\r\n                return null;\r\n            }\r\n        } else {\r\n            if (!heimSpiel(friendID)) {\r\n                System.out.println(\"Friend hat keine Assets\");\r\n                return null;\r\n            }\r\n        }\r\n        amount = random.nextInt(5);\r\n        ArrayList<Integer> gameList = new ArrayList<>();\r\n\r\n        for (int i = 0; i < amount; i++) {\r\n            gameList.add(i);\r\n        }\r\n\r\n        int helper = 0;\r\n        int resultUser = 0;\r\n        int resultFriend = 0;\r\n        System.out.println();\r\n        for (int i = 0; i < amount; i++) {\r\n\r\n            int gameID = random.nextInt(gameList.size());\r\n\r\n            switch (gameID) {\r\n                case 0:\r\n                    helper = getLineUpBonus(lineup, lineupfriend);\r\n                    System.out.print(\"Match: getLineUpBonus\\t Winner:\");\r\n                    if (helper > 0) {\r\n                        System.out.println(user.getUserName());\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        System.out.println(friend.getUserName());\r\n                        resultFriend++;\r\n                    } else {\r\n                        System.out.println(\"Unentschieden\");\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    System.out.println(user.getUserName() + \": \" + resultUser + \" - \" + friend.getUserName() + \": \" + resultFriend);\r\n                    break;\r\n                case 1:\r\n                    helper = getDurchschnittStärkeTeam(startElfUser, startElfFriend, lineup, lineupfriend);\r\n                    System.out.print(\"Match: getDurchschnittStärkeTeam\\t Winner:\");\r\n                    if (helper > 0) {\r\n                        System.out.println(user.getUserName());\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        System.out.println(friend.getUserName());\r\n                        resultFriend++;\r\n                    } else {\r\n                        System.out.println(\"Unentschieden\");\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    System.out.println(user.getUserName() + \": \" + resultUser + \" - \" + friend.getUserName() + \": \" + resultFriend);\r\n                    break;\r\n                case 2:\r\n                    helper = getMFDurchschnittStärke(startElfUser, startElfFriend, lineup, lineupfriend);\r\n                    System.out.print(\"Match: getMFDurchschnittStärke\\t Winner:\");\r\n                    if (helper > 0) {\r\n                        System.out.println(user.getUserName());\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        System.out.println(friend.getUserName());\r\n                        resultFriend++;\r\n                    } else {\r\n                        System.out.println(\"Unentschieden\");\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    System.out.println(user.getUserName() + \": \" + resultUser + \" - \" + friend.getUserName() + \": \" + resultFriend);\r\n                    break;\r\n                case 3:\r\n                    helper = getChipsaStrength(team, team1);\r\n                    System.out.print(\"Match: getChipsaStrength\\t Winner:\");\r\n                    if (helper > 0) {\r\n                        System.out.println(user.getUserName());\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        System.out.println(friend.getUserName());\r\n                        resultFriend++;\r\n                    } else {\r\n                        System.out.println(\"Unentschieden\");\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    System.out.println(user.getUserName() + \": \" + resultUser + \" - \" + friend.getUserName() + \": \" + resultFriend);\r\n                    break;\r\n                case 4:\r\n                    helper = getPairStrength(startElfUser, startElfFriend);\r\n                    System.out.print(\"Match: getPairStrength\\t Winner:\");\r\n                    if (helper > 0) {\r\n                        System.out.println(user.getUserName());\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        System.out.println(friend.getUserName());\r\n                        resultFriend++;\r\n                    } else {\r\n                        System.out.println(\"Unentschieden\");\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    System.out.println(user.getUserName() + \": \" + resultUser + \" - \" + friend.getUserName() + \": \" + resultFriend);\r\n                    break;\r\n                case 5:\r\n                    helper = getRandomLottery();\r\n                    System.out.print(\"Match: getRandomLottery\\t Winner:\");\r\n                    if (helper > 0) {\r\n                        System.out.println(user.getUserName());\r\n                        resultUser++;\r\n                    } else if (helper < 0) {\r\n                        System.out.println(friend.getUserName());\r\n                        resultFriend++;\r\n                    } else {\r\n                        System.out.println(\"Unentschieden\");\r\n                        resultFriend++;\r\n                        resultUser++;\r\n                    }\r\n                    System.out.println(user.getUserName() + \": \" + resultUser + \" - \" + friend.getUserName() + \": \" + resultFriend);\r\n                    break;\r\n            }\r\n\r\n            gameList.removeIf(integer -> integer == gameID);\r\n\r\n        }\r\n        System.out.println();\r\n        if(user.getTeamName().equals(\"Rot-Weiss Essen\") && (resultUser < resultFriend || resultUser == resultFriend)){\r\n            resultUser = resultFriend + random.nextInt(3) + 1;\r\n        }else if(friend.getTeamName().equals(\"Rot-Weiss Essen\") && (resultUser > resultFriend || resultUser == resultFriend)){\r\n            resultFriend = resultUser + random.nextInt(3) + 1;\r\n        }\r\n\r\n        if (resultUser > resultFriend) {\r\n            System.out.println(getUserFromID(userID).teamName + \" gewinnt:\\t\" + resultUser + \" - \" + resultFriend);\r\n            match.setResult(userID + \":\" + resultUser + \":\" + friendID + \":\" +resultFriend);\r\n            match.setPending(false);\r\n            addMatchToDatabase(match);\r\n            return match;\r\n        } else if (resultUser < resultFriend) {\r\n            System.out.println(getUserFromID(friendID).teamName + \" gewinnt:\\t\" + resultUser + \" - \" + resultFriend);\r\n            match.setResult(userID + \":\" + resultUser + \":\" + friendID + \":\" +resultFriend);\r\n            match.setPending(false);\r\n            addMatchToDatabase(match);\r\n            return match;\r\n        } else {\r\n            System.out.println(\"Unentschieden: \\t\" + resultUser + \" - \" + resultFriend);\r\n            match.setResult(userID + \":\" + resultUser + \":\" + friendID + \":\" +resultFriend);\r\n            match.setPending(false);\r\n            addMatchToDatabase(match);\r\n            return match;\r\n        }\r\n\r\n    }\r\n\r\n    private static int addMatchToDatabase(Match match) {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            session.save(match);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n\r\n    }\r\n\r\n    private static int removePendingFromMatch(Match match, String result) {\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            match = session.get(Match.class, match.id);\r\n            match.pending = false;\r\n            match.setResult(result);\r\n            session.update(match);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n\r\n    }\r\n\r\n    //TODO 6\r\n    public static Assets getAssetFromUser(int userID) {\r\n        List<Assets> assets = getAssets();\r\n        Assets a = null;\r\n\r\n        for (Assets a1 : assets) {\r\n            if (a1.getUserid() == userID) {\r\n                a = a1;\r\n                return a;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static boolean heimSpiel(int id) {\r\n\r\n        int reward = 0;\r\n\r\n        List<Player> player = getPlayer();\r\n\r\n        Player p = null;\r\n        Assets a = getAssetFromUser(id);\r\n\r\n        if (a == null) {\r\n            return false;\r\n        }\r\n\r\n        for (Player p1 : player) {\r\n            if (p1.getId() == id) {\r\n                p = p1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        switch (a.getImbiss()) {\r\n            case 0:\r\n                reward += 5;\r\n                break;\r\n            case 1:\r\n                reward += 10;\r\n                break;\r\n            case 2:\r\n                reward += 15;\r\n                break;\r\n            case 3:\r\n                reward += 20;\r\n                break;\r\n        }\r\n\r\n        switch (a.getKapazitaet()) {\r\n            case 0:\r\n                reward += 5;\r\n                break;\r\n            case 1:\r\n                reward += 10;\r\n                break;\r\n            case 2:\r\n                reward += 15;\r\n                break;\r\n            case 3:\r\n                reward += 20;\r\n                break;\r\n        }\r\n\r\n        switch (a.getParkplatz()) {\r\n            case 0:\r\n                reward += 5;\r\n                break;\r\n            case 1:\r\n                reward += 10;\r\n                break;\r\n            case 2:\r\n                reward += 15;\r\n                break;\r\n            case 3:\r\n                reward += 20;\r\n                break;\r\n        }\r\n\r\n        addSEP(id, reward);\r\n        return true;\r\n    }\r\n\r\n    public static void addSEP(int id, int amount) {\r\n\r\n        List<User> user = getUser();\r\n        for (User u : user) {\r\n            if (u.getId() == id) {\r\n                u.setsEPS(u.getsEPS() + amount);\r\n                Lootboxen(u, id);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static int getRandomLottery() {\r\n\r\n        Random random = new Random();\r\n\r\n        int i = random.nextInt(1);\r\n        int i2 = random.nextInt(1);\r\n\r\n        if (i > i2) {\r\n            return 1;\r\n        } else if (i < i2) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n\r\n    }\r\n\r\n    public static int getPairStrength(List<Player> startElfUser, List<Player> startElfFriend) {\r\n\r\n        startElfUser.removeIf(player -> player.getPos() == \"TW\");\r\n        startElfFriend.removeIf(player -> player.getPos() == \"TW\");\r\n        int result = 0;\r\n        Random random = new Random();\r\n        for (int i = 0; i < 10; i++) {\r\n            int randomPlayer = random.nextInt(startElfUser.size());\r\n            int randomPlayer1 = random.nextInt(startElfFriend.size());\r\n\r\n            if (startElfUser.get(randomPlayer).getGesamtStaerke() > startElfFriend.get(randomPlayer).getGesamtStaerke()) {\r\n                result++;\r\n            } else if (startElfUser.get(randomPlayer1).getGesamtStaerke() < startElfFriend.get(randomPlayer1).getGesamtStaerke()) {\r\n                result--;\r\n            }\r\n\r\n            startElfUser.remove(randomPlayer);\r\n            startElfFriend.remove(randomPlayer1);\r\n        }\r\n\r\n        if (result > 0) {\r\n            return 1;\r\n        } else if (result < 0) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n\r\n    }\r\n\r\n    public static int getChipsaStrength(List<Player> team, List<Player> team1) {\r\n\r\n        Random random = new Random();\r\n\r\n        List<Player> teamBench = new ArrayList<>();\r\n        List<Player> friendsteamBench = new ArrayList<>();\r\n\r\n        for (int i = 0; i < 3; i++) {\r\n            Player p = team.get(random.nextInt(team.size()));\r\n            if (!teamBench.contains(p)) {\r\n                teamBench.add(p);\r\n            }\r\n\r\n            Player p1 = team1.get(random.nextInt(team1.size()));\r\n            if (!friendsteamBench.contains(p1)) {\r\n                friendsteamBench.add(p1);\r\n            }\r\n        }\r\n\r\n        int strength = 0;\r\n\r\n        for (Player player : teamBench) {\r\n            strength += player.getGesamtStaerke();\r\n        }\r\n\r\n        int strength1 = 0;\r\n\r\n        for (Player player : friendsteamBench) {\r\n            strength1 += player.getGesamtStaerke();\r\n        }\r\n\r\n        if (strength > strength1) {\r\n            return 1;\r\n        } else if (strength < strength1) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public static int getMFDurchschnittStärke(List<Player> startElfUser, List<Player> startElfFriend, String lineup, String lineupfriend) {\r\n\r\n        int df = 0;\r\n        int mf = 0;\r\n        int fw = 0;\r\n        int tw = 0;\r\n\r\n        for (Player p : startElfUser) {\r\n            switch (p.getPos()) {\r\n                case \"TW\":\r\n                    tw = (int)p.getGesamtStaerke();\r\n                    break;\r\n                case \"DF\":\r\n                    df += p.getGesamtStaerke();\r\n                    break;\r\n                case \"MF\":\r\n                    mf += p.getGesamtStaerke();\r\n                    break;\r\n                case \"FW\":\r\n                    fw += p.getGesamtStaerke();\r\n                    break;\r\n            }\r\n        }\r\n        String[] lineups = lineup.split(\"-\");\r\n\r\n        double dMFStrength = mf / Integer.parseInt(lineups[1]);\r\n\r\n\r\n        int dfFriend = 0;\r\n        int mfFriend = 0;\r\n        int fwFriend = 0;\r\n        int twFriend = 0;\r\n\r\n        for (Player p : startElfFriend) {\r\n            switch (p.getPos()) {\r\n                case \"TW\":\r\n                    twFriend = (int)p.getGesamtStaerke();\r\n                    break;\r\n                case \"DF\":\r\n                    dfFriend += p.getGesamtStaerke();\r\n                    break;\r\n                case \"MF\":\r\n                    mfFriend += p.getGesamtStaerke();\r\n                    break;\r\n                case \"FW\":\r\n                    fwFriend += p.getGesamtStaerke();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        lineups = lineupfriend.split(\"-\");\r\n\r\n        double dMFStrengthFriend = mfFriend / Integer.parseInt(lineups[1]);\r\n\r\n        if (dMFStrength > dMFStrengthFriend) {\r\n            return 1;\r\n        } else if (dMFStrength < dMFStrengthFriend) {\r\n            return -1;\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    public static int getDurchschnittStärkeTeam(List<Player> startElfUser, List<Player> startElfFriend, String lineup, String lineupfriend) {\r\n\r\n        int df = 0;\r\n        int mf = 0;\r\n        int fw = 0;\r\n        int tw = 0;\r\n\r\n        for (Player p : startElfUser) {\r\n            switch (p.getPos()) {\r\n                case \"TW\":\r\n                    tw = (int) p.getGesamtStaerke();\r\n                    break;\r\n                case \"DF\":\r\n                    df += p.getGesamtStaerke();\r\n                    break;\r\n                case \"MF\":\r\n                    mf += p.getGesamtStaerke();\r\n                    break;\r\n                case \"FW\":\r\n                    fw += p.getGesamtStaerke();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        int dfFriend = 0;\r\n        int mfFriend = 0;\r\n        int fwFriend = 0;\r\n        int twFriend = 0;\r\n\r\n        for (Player p : startElfFriend) {\r\n            switch (p.getPos()) {\r\n                case \"TW\":\r\n                    twFriend = (int) p.getGesamtStaerke();\r\n                    break;\r\n                case \"DF\":\r\n                    dfFriend += p.getGesamtStaerke();\r\n                    break;\r\n                case \"MF\":\r\n                    mfFriend += p.getGesamtStaerke();\r\n                    break;\r\n                case \"FW\":\r\n                    fwFriend += p.getGesamtStaerke();\r\n                    break;\r\n            }\r\n        }\r\n\r\n\r\n        String[] lineups = lineup.split(\"-\");\r\n\r\n        double dFWStrength = fw / Integer.parseInt(lineups[2]);\r\n        double dDFStrength = fw / Integer.parseInt(lineups[0]);\r\n\r\n        String[] lineups1 = lineupfriend.split(\"-\");\r\n\r\n        double dFWStrength1 = fwFriend / Integer.parseInt(lineups1[2]);\r\n        double dDFStrength1 = fwFriend / Integer.parseInt(lineups1[0]);\r\n\r\n\r\n        double firstTeamStrength = dFWStrength / (dDFStrength1 + twFriend);\r\n        double secoundTeamStrength = dFWStrength1 / (dDFStrength + tw);\r\n\r\n\r\n        if (firstTeamStrength > secoundTeamStrength) {\r\n            return 1;\r\n        } else if (firstTeamStrength < secoundTeamStrength) {\r\n            return -1;\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    public static int getLineUpBonus(String lineup, String lineupfriend) {\r\n\r\n        switch (lineup) {\r\n            case \"4-4-2\":\r\n                switch (lineupfriend) {\r\n                    case \"4-4-2\":\r\n                        return 0;\r\n                    case \"5-4-1\":\r\n                        return 1;\r\n                    case \"3-4-3\":\r\n                        return 1;\r\n                    case \"4-3-3\":\r\n                        return -1;\r\n                    case \"3-5-2\":\r\n                        return -1;\r\n                }\r\n\r\n            case \"5-4-1\":\r\n                switch (lineupfriend) {\r\n                    case \"4-4-2\":\r\n                        return -1;\r\n                    case \"5-4-1\":\r\n                        return 0;\r\n                    case \"3-4-3\":\r\n                        return -1;\r\n                    case \"4-3-3\":\r\n                        return 1;\r\n                    case \"3-5-2\":\r\n                        return 1;\r\n                }\r\n\r\n            case \"3-4-3\":\r\n                switch (lineupfriend) {\r\n                    case \"4-4-2\":\r\n                        return -1;\r\n                    case \"5-4-1\":\r\n                        return 1;\r\n                    case \"3-4-3\":\r\n                        return 0;\r\n                    case \"4-3-3\":\r\n                        return -1;\r\n                    case \"3-5-2\":\r\n                        return 1;\r\n                }\r\n\r\n            case \"4-3-3\":\r\n                switch (lineupfriend) {\r\n                    case \"4-4-2\":\r\n                        return 1;\r\n                    case \"5-4-1\":\r\n                        return -1;\r\n                    case \"3-4-3\":\r\n                        return 1;\r\n                    case \"4-3-3\":\r\n                        return 0;\r\n                    case \"3-5-2\":\r\n                        return -1;\r\n                }\r\n\r\n            case \"3-5-2\":\r\n                switch (lineupfriend) {\r\n                    case \"4-4-2\":\r\n                        return 1;\r\n                    case \"5-4-1\":\r\n                        return -1;\r\n                    case \"3-4-3\":\r\n                        return -1;\r\n                    case \"4-3-3\":\r\n                        return 1;\r\n                    case \"3-5-2\":\r\n                        return 0;\r\n                }\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private static String identLineUp(List<Player> team) {\r\n\r\n        ArrayList<Player> df = new ArrayList<>();\r\n        ArrayList<Player> mf = new ArrayList<>();\r\n        ArrayList<Player> fw = new ArrayList<>();\r\n\r\n        for (Player p : team) {\r\n            switch (p.getPos()) {\r\n                case \"DF\":\r\n                    df.add(p);\r\n                    break;\r\n                case \"MF\":\r\n                    mf.add(p);\r\n                    break;\r\n                case \"FW\":\r\n                    fw.add(p);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return df.size() + \"-\" + mf.size() + \"-\" + fw.size();\r\n    }\r\n\r\n    //TODO 6\r\n    public static int initAssets(int userID) {\r\n        Assets assetToSave = new Assets(userID, \"default\");\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            session.save(assetToSave);\r\n            transaction.commit();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n    }\r\n    //TODO 6\r\n    public static List<Assets> getAssets() {\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Assets> everyAsset = session.createQuery(\"FROM Assets\").list();\r\n            return everyAsset;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }\r\n//TODO 6\r\n    public static int upgradeAssets(int userID, int asset) {\r\n        Assets assetToUpdate = getAssetFromUser(userID);\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            assetToUpdate = session.get(Assets.class, assetToUpdate.id);\r\n            if (!assetToUpdate.upgrade(asset)) {\r\n                return -2;\r\n            }\r\n            session.update(assetToUpdate);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public static int initTournementLiga(int userID, String name, boolean type, int fee, int maxAnzahl) {\r\n        User userFromID = getUserFromID(userID);\r\n        if(userFromID.getsEPS() < fee){\r\n            return -3;\r\n        }\r\n        List<Tournement> allTournements = getAllTournements();\r\n        Tournement TournementToSave = new Tournement(userID, name, type, fee, maxAnzahl);\r\n        TournementToSave.addContestant(userID);\r\n        TournementToSave.setPending(true);\r\n        for (Tournement t : allTournements) {\r\n            if (t.getName().toLowerCase().equals(name.toLowerCase())) {\r\n                return -2;\r\n            }\r\n        }\r\n        addSEP(userID,-fee);\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            session.save(TournementToSave);\r\n            transaction.commit();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public static int initTournement(Tournement tournement) {\r\n        List<Tournement> allTournements = getAllTournements();\r\n        for (Tournement t : allTournements) {\r\n            if (t.getName().equals(tournement.getName())) {\r\n                return -2;\r\n            }\r\n        }\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            transaction = session.beginTransaction();\r\n            session.save(tournement);\r\n            transaction.commit();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public static List<Tournement> getAllTournements() {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Tournement> everyTournementLiga = session.createQuery(\"FROM Tournement\").list();\r\n            return everyTournementLiga;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    public static int addUserToTournement(int userID, String tournementName) {\r\n        User userFromID = getUserFromID(userID);\r\n        if (userFromID.getTeamName().isEmpty()) {\r\n            return -1;\r\n        }\r\n        List<Team> allTeams = getAllTeams();\r\n        allTeams.removeIf(Team -> Team.getUserID() != userID);\r\n        allTeams.removeIf(Team -> !Team.getStartElf());\r\n        if (allTeams.size() != 11) {\r\n            return -4;\r\n        }\r\n        Tournement tournement = getTournementByName(tournementName);\r\n        if(tournement.getFee() > userFromID.getsEPS()){\r\n            return -5;\r\n        }\r\n        if(!tournement.isPending()){\r\n            return -3;\r\n        }\r\n        List<Integer> contestantList = tournement.getContestantID();\r\n        for (int i : contestantList) {\r\n            if (i == userID) {\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        addSEP(userID,-tournement.getFee());\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            tournement = session.get(Tournement.class, tournement.getId());\r\n            tournement.getContestantID().add(userID);\r\n            session.update(tournement);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            if (tournement.getContestantID().size() == tournement.getMaxAnzahl()) {\r\n                return 2;\r\n            }\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n\r\n    }\r\n\r\n    public static User getUserFromID(int userID) {\r\n\r\n        List<User> user = getUser();\r\n        for (User u : user) {\r\n            if (u.getId() == userID) {\r\n                return u;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Tournement getTournementByName(String name) {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Tournement> everyTournementLiga = session.createQuery(\"FROM Tournement\").list();\r\n            for (Tournement t : everyTournementLiga) {\r\n                if (t.getName().toLowerCase().equals(name.toLowerCase())) {\r\n                    return t;\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static List<Match> getMatchHistory(int userID) {\r\n\r\n        List<Match> allMatches = getAllMatches();\r\n        List<Match> allMatchesWithUser = new ArrayList<>();\r\n        System.out.println(userID);\r\n        for (Match m : allMatches) {\r\n            if (!m.pending && (m.senderUserID == userID || m.receiverUserID == userID)) {\r\n                allMatchesWithUser.add(m);\r\n            }\r\n        }\r\n        return allMatchesWithUser;\r\n\r\n    }\r\n\r\n    private static List<Match> getAllMatches() {\r\n\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            List<Match> everyUser = session.createQuery(\"FROM Match\").list();\r\n            return everyUser;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n    public static int declineMatchRequest(int userID, String friendName) {\r\n        User userWithName = findUserWithName(friendName);\r\n        List<Match> allReceivedMatches = getAllReceivedMatches(userID);\r\n        for (Match m : allReceivedMatches) {\r\n            if (m.getSenderUserID() == userWithName.id) {\r\n                return removeMatch(m);\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    private static int removeMatch(Match m) {\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            m = session.get(Match.class, m.getId());\r\n            session.remove(m);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    public static MatchWrapper matchWrapperFromMatch(Match match, int UserID) {\r\n\r\n        MatchWrapper matchWrapper = new MatchWrapper();\r\n        int[] resultFromMatch = getResultFromMatch(match);\r\n\r\n        if(resultFromMatch[0] == UserID){\r\n\r\n            User userFromID = getUserFromID(resultFromMatch[2]);\r\n\r\n            matchWrapper.setName(userFromID.getUserName());\r\n            matchWrapper.setTeamName(userFromID.getTeamName());\r\n            matchWrapper.setResult(match.getResult());\r\n            if(resultFromMatch[1] > resultFromMatch[3]){\r\n                matchWrapper.setWin(true);\r\n            }else{\r\n                matchWrapper.setWin(false);\r\n            }\r\n\r\n        }else{\r\n            User userFromID = getUserFromID(resultFromMatch[0]);\r\n\r\n            matchWrapper.setName(userFromID.getUserName());\r\n            matchWrapper.setTeamName(userFromID.getTeamName());\r\n            matchWrapper.setResult(match.getResult());\r\n            if(resultFromMatch[3] > resultFromMatch[1]){\r\n                matchWrapper.setWin(true);\r\n            }else{\r\n                matchWrapper.setWin(false);\r\n            }\r\n        }\r\n\r\n        return matchWrapper;\r\n    }\r\n\r\n    private static int[] getResultFromMatch(Match match) {\r\n\r\n        String[] split = match.getResult().split(\":\");\r\n        int[] splitInt = new int[split.length];\r\n\r\n        for (int i = 0; i < split.length; i++) {\r\n            splitInt[i] = Integer.parseInt(split[i]);\r\n        }\r\n        return splitInt;\r\n    }\r\n\r\n    public static void beginTournement(String tName) {\r\n\r\n        List<Tournement> allTournements = getAllTournements();\r\n\r\n        for (Tournement t : allTournements) {\r\n            if (t.getName().equals(tName)) {\r\n\r\n                if (t.getType().equals(\"Knock-Out\")) {\r\n                    ArrayList<Integer> playerlist = new ArrayList<>();\r\n                    playerlist.addAll(t.getContestantID());\r\n                    while (playerlist.size() > 1) {\r\n                        HashMap<Integer, Integer> matchMap = setupMatchesKnockOut(playerlist);\r\n                        playerlist = new ArrayList<>();\r\n                        for (Map.Entry<Integer, Integer> entry : matchMap.entrySet()) {\r\n                            int winnerID = playKnockOutMatches(entry, t);\r\n                            playerlist.add(winnerID);\r\n                        }\r\n                    }\r\n                } else {\r\n\r\n                    ArrayList<Integer> playerlist = new ArrayList<>();\r\n                    playerlist.addAll(t.getContestantID());\r\n\r\n                    playLigaMatches(playerlist, t);\r\n                }\r\n\r\n                t.setPending(false);\r\n                updateTournement(t);\r\n                addSepToWinner(t);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static void addSepToWinner(Tournement t) {\r\n\r\n        int gewinn = t.getContestantID().size() * t.getFee();\r\n        gewinn = gewinn / 6;\r\n        if(t.getType().equals(\"Knock-Out\")){\r\n\r\n            ArrayList<MatchWrapper> tMatches = getTMatches(t.getName());\r\n            ArrayList<MatchWrapper> trim = trim(tMatches);\r\n            int i = getLoserFromMatch(trim.get(trim.size()-3).getResult());\r\n            int i2 = getLoserFromMatch(trim.get(trim.size()-5).getResult());\r\n            int[] winnerFromResult1;\r\n            Match match = new Match(i,i2);\r\n            Match match1;\r\n            do{\r\n                match1 = acceptMatchRequest(match);\r\n                winnerFromResult1 = getWinnerFromResult(match1.getResult());\r\n            }while(winnerFromResult1 == null);\r\n\r\n            t.addMatch(match1.getId());\r\n            updateTournement(t);\r\n            addSEP(winnerFromResult1[0],gewinn);\r\n            System.out.println(winnerFromResult1[0] + \" bekommt: \" + gewinn);\r\n\r\n            String result = trim.get(trim.size() - 1).result;\r\n            int[] winnerFromResult = getWinnerFromResult(result);\r\n\r\n            addSEP(winnerFromResult[0],gewinn*3);\r\n            System.out.println(winnerFromResult[0] + \" bekommt: \" + gewinn * 4);\r\n            addSEP(winnerFromResult[1],gewinn*2);\r\n            System.out.println(winnerFromResult[1] + \" bekommt: \" + gewinn * 2);\r\n        }else{\r\n\r\n            ArrayList<MatchWrapper> tMatches = getTMatches(t.getName());\r\n            ArrayList<HelperClass> helperClasses = matchListToHelperClass(tMatches);\r\n            for (int i = 0; i < 3; i++) {\r\n                addSEP(findUserWithName(helperClasses.get(i).getName()).getId(),gewinn * (3-i));\r\n                System.out.println(findUserWithName(helperClasses.get(i).getName())+ \" bekommt: \" + gewinn * (3-i));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private static int getLoserFromMatch(String result) {\r\n\r\n        String[] split = result.split(\":\");\r\n\r\n        int id1 = Integer.parseInt(split[0]);\r\n        int id2 = Integer.parseInt(split[2]);\r\n\r\n        int score1 = Integer.parseInt(split[1]);\r\n        int score2 = Integer.parseInt(split[3]);\r\n\r\n        if(score1 > score2){\r\n            return id2;\r\n        }else if(score2 > score1){\r\n            return id1;\r\n        }else{\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    private static ArrayList<HelperClass> matchListToHelperClass(List<MatchWrapper> matchList) {\r\n\r\n\r\n        matchList.sort(new Comparator<MatchWrapper>() {\r\n            @Override\r\n            public int compare(MatchWrapper matchWrapper, MatchWrapper t1) {\r\n                return matchWrapper.getName().compareTo(t1.getName());\r\n            }\r\n        });\r\n        String name = \"\";\r\n        int i = 0;\r\n        for (MatchWrapper m : matchList) {\r\n            if(!m.getName().equals(name) && !name.equals(\"\")){\r\n                break;\r\n            }\r\n            i++;\r\n            name = m.getName();\r\n        }\r\n\r\n        ArrayList<HelperClass> helperClasses = new ArrayList<>();\r\n\r\n        int punkte = 0;\r\n        int counter = 0;\r\n        int tore = 0;\r\n        for (MatchWrapper m : matchList) {\r\n            if(m.getGoals().split(\" : \")[0].equals(\"Unentschieden\")){\r\n                tore += Integer.parseInt(m.getGoals().split(\" : \")[1]);\r\n                punkte += 1;\r\n            }else if(m.getGoals().split(\" : \")[0].equals(\"Gewonnen\")){\r\n                int i1 = Integer.parseInt(m.getGoals().split(\" : \")[1]);\r\n                int i2 = Integer.parseInt(m.getGoals().split(\" : \")[2]);\r\n                if(i1 > i2){\r\n                    tore += i1;\r\n                }else{\r\n                    tore += i2;\r\n                }\r\n                punkte += 3;\r\n            }else{\r\n                int i1 = Integer.parseInt(m.getGoals().split(\" : \")[1]);\r\n                int i2 = Integer.parseInt(m.getGoals().split(\" : \")[2]);\r\n                if(i1 < i2){\r\n                    tore += i1;\r\n                }else{\r\n                    tore += i2;\r\n                }\r\n            }\r\n            counter++;\r\n            if(counter == i){\r\n                helperClasses.add(matchWrapperToHelperClass(m,punkte,tore));\r\n                tore = 0;\r\n                punkte = 0;\r\n                counter = 0;\r\n            }\r\n        }\r\n\r\n        helperClasses.sort(new Comparator<HelperClass>() {\r\n            @Override\r\n            public int compare(HelperClass helperClass, HelperClass t1) {\r\n                if(Integer.compare(helperClass.getPunkte(),t1.getPunkte()) == 0){\r\n                    return Integer.compare(helperClass.getTore(),t1.getTore()) * (-1);\r\n                }\r\n                return Integer.compare(helperClass.getPunkte(),t1.getPunkte()) * (-1);\r\n            }\r\n        });\r\n        counter = 1;\r\n        for (HelperClass h : helperClasses) {\r\n            h.setPlatz(counter++);\r\n        }\r\n        return helperClasses;\r\n\r\n    }\r\n\r\n\r\n    private static HelperClass matchWrapperToHelperClass(MatchWrapper m, int punkte, int tore) {\r\n\r\n        HelperClass helperClass = new HelperClass();\r\n        helperClass.setPunkte(punkte);\r\n        helperClass.setName(m.getName());\r\n        helperClass.setTeamName(m.getTeamName());\r\n        helperClass.setTore(tore);\r\n        return helperClass;\r\n\r\n    }\r\n    private static int[] getWinnerFromResult(String result) {\r\n\r\n        String[] split = result.split(\":\");\r\n\r\n        int id1 = Integer.parseInt(split[0]);\r\n        int id2 = Integer.parseInt(split[2]);\r\n\r\n        int score1 = Integer.parseInt(split[1]);\r\n        int score2 = Integer.parseInt(split[3]);\r\n\r\n        if(score1 > score2){\r\n            return new int[]{id1,id2};\r\n        }else if(score2 > score1){\r\n            return new int[]{id2,id1};\r\n        }else{\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    private static ArrayList<MatchWrapper> trim(ArrayList<MatchWrapper> tMatches) {\r\n        for (Iterator<MatchWrapper> iterator = tMatches.iterator(); iterator.hasNext();) {\r\n            MatchWrapper mw = iterator.next();\r\n            String[] split = mw.getResult().split(\":\");\r\n            if (Integer.valueOf(split[1]) == Integer.valueOf(split[3])) {\r\n                iterator.remove();\r\n            }\r\n        }\r\n        return tMatches;\r\n    }\r\n    private static void playLigaMatches(ArrayList<Integer> playerlist, Tournement t) {\r\n        for (int i = 0; i < playerlist.size(); i++) {\r\n            for (int j = i + 1; j < playerlist.size(); j++) {\r\n                Match match = new Match(playerlist.get(i), playerlist.get(j));\r\n                Match match1 = acceptMatchRequest(match);\r\n                t.addMatch(match1.getId());\r\n                updateTournement(t);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private static int playKnockOutMatches(Map.Entry<Integer, Integer> matchMap, Tournement t) {\r\n        while (true) {\r\n            Integer key = matchMap.getKey();\r\n            Integer value = matchMap.getValue();\r\n\r\n            Match match = new Match(key, value);\r\n\r\n            match = acceptMatchRequest(match);\r\n            t.addMatch(match.getId());\r\n\r\n            updateTournement(t);\r\n\r\n            String[] split = match.getResult().split(\":\");\r\n            int i1 = Integer.parseInt(split[1]);\r\n            int i2 = Integer.parseInt(split[3]);\r\n\r\n            if (i1 > i2) {\r\n                return key;\r\n            } else if (i2 > i1) {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void updateTournement(Tournement t) {\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            session.update(t);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    public static HashMap<Integer, Integer> setupMatchesKnockOut(List<Integer> contestantID) {\r\n        List<Integer> contestantIDs = new ArrayList<>();\r\n        contestantIDs.addAll(contestantID);\r\n        HashMap<Integer, Integer> matchMap = new HashMap<>();\r\n        Random random = new Random();\r\n\r\n        while (contestantIDs.size() > 0) {\r\n\r\n            Integer integer = contestantIDs.get(random.nextInt(contestantIDs.size()));\r\n            contestantIDs.remove(integer);\r\n            Integer integer1 = contestantIDs.get(random.nextInt(contestantIDs.size()));\r\n            contestantIDs.remove(integer1);\r\n\r\n            matchMap.put(integer, integer1);\r\n\r\n        }\r\n\r\n        return matchMap;\r\n\r\n    }\r\n\r\n    public static ArrayList<MatchWrapper> getTMatches(String tName) {\r\n\r\n        List<Tournement> allTournements = getAllTournements();\r\n        ArrayList<Match> matchList = new ArrayList<>();\r\n        List<Match> allMatches = getAllMatches();\r\n        ArrayList<MatchWrapper> matchWrappers = new ArrayList<>();\r\n\r\n        for (Tournement t : allTournements) {\r\n            if (t.getName().equals(tName)) {\r\n                for (int i : t.getMatchIDs()) {\r\n                    for (Match m : allMatches) {\r\n                        if (m.getId() == i) {\r\n                            matchList.add(m);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (Match m : matchList) {\r\n                    matchWrappers.add(matchWrapperFromMatch(m, m.getReceiverUserID()));\r\n                    matchWrappers.add(matchWrapperFromMatch(m, m.getSenderUserID()));\r\n                }\r\n\r\n                return matchWrappers;\r\n            }\r\n        }\r\n        return null;\r\n\r\n    }\r\n    //TODO 6\r\n    public static int updateAsset(int userID, String s) {\r\n        Assets assetFromUser = getAssetFromUser(userID);\r\n        assetFromUser.setName(s);\r\n        Transaction transaction = null;\r\n        try (Session session = HibernateUtil.getSessionFactory().openSession()) {\r\n            session.update(assetFromUser);\r\n            transaction = session.beginTransaction();\r\n            transaction.commit();\r\n            session.close();\r\n            return 1;\r\n        } catch (Exception e) {\r\n            if (transaction != null) {\r\n                transaction.rollback();\r\n            }\r\n            e.printStackTrace();\r\n            return -1;\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Server/DatabaseController.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/main/java/Server/DatabaseController.java	(date 1593969812931)
@@ -22,7 +22,7 @@
         }
         return null;
     }
-    
+
     public static Player getPlayerFromID(int id) {
 
         Transaction transaction = null;
@@ -512,16 +512,17 @@
             return false;
         }
     }
-    public static int buySeps (int userID){
+
+    public static int buySeps(int userID) {
 
         //Gibt dem Nutzer +1000SEPS (zurzeit ohne kosten/limit)
         User user = checkIfUserIsInDatabase(userID);
         if (user == null) return 0;
 
-        int newSEPS = user.getsEPS()+1000;
+        int newSEPS = user.getsEPS() + 1000;
         if (newSEPS <= 0) return 0;
         user.setsEPS(newSEPS);
-        Lootboxen(user,userID);
+        Lootboxen(user, userID);
         return newSEPS;
     }
 
@@ -530,13 +531,13 @@
         //Entfernt Spieler aus Team, fügt SEPS in höhe der Stärke hinzu
         User user = checkIfUserIsInDatabase(userID);
         if (user == null) return 0;
-        if(getPlayerFromID(playerID)==null)return 0;
+        if (getPlayerFromID(playerID) == null) return 0;
 
         double playerstaerke = getPlayerFromID(playerID).getGesamtStaerke();
-        int newSEPS = user.getsEPS()+ (int)playerstaerke;
+        int newSEPS = user.getsEPS() + (int) playerstaerke;
         if (newSEPS <= 0) return 0;
         user.setsEPS(newSEPS);
-        Lootboxen(user,userID);
+        Lootboxen(user, userID);
         deletePlayer(playerID);
         return newSEPS;
     }
@@ -585,11 +586,11 @@
         // Generiere Spieler und füge sie der Liste hinzu
         for (int i = 0; i < AnzahlBoxen; i++) {
             Player player = getRandomPlayer();
-            while(player == null) player = getRandomPlayer();
+            while (player == null) player = getRandomPlayer();
             playerList.add(player);
             addPlayerToTeam(new Team(userID, player.getId()));
         }
-        for (Player p:playerList) {
+        for (Player p : playerList) {
             Team team = new Team(userID, p.getId());
             addPlayerToTeam(team);
         }
@@ -610,7 +611,7 @@
         List<Player> MFplayerList = new ArrayList<>();
         List<Player> FWplayerList = new ArrayList<>();
         List<Player> player = getPlayer();
-        if(player == null) return null;
+        if (player == null) return null;
 
         //Verteilen der Spieler in die Listen mit der passenden Position
         for (Player p : player) {
@@ -659,7 +660,8 @@
         }
         return playerList;
     }
-    public static void removeDrafted (List<Player> PlayerList1, List<Player> PlayerList2){
+
+    public static void removeDrafted(List<Player> PlayerList1, List<Player> PlayerList2) {
         List<Player> drafted = TWORandomPlayer(PlayerList1);
         PlayerList1.removeAll(drafted);
         PlayerList2.addAll(drafted);
@@ -672,7 +674,7 @@
         Random random = new Random();
         Player player = playerlist.get(random.nextInt(playerlist.size()));
         for (int i = 0; i < 100; i++) {
-            int strength = j - (int)player.getGesamtStaerke();
+            int strength = j - (int) player.getGesamtStaerke();
             for (Player p : playerlist21) {
                 if (p.getGesamtStaerke() == strength) {
                     playerList2.add(p);
@@ -706,7 +708,7 @@
         for (int i = 0; i < 100; i++) {
             int strength = (int) (j - player.getGesamtStaerke());
             for (Player p : playerlist) {
-                if ((int)p.getGesamtStaerke() == strength) {
+                if ((int) p.getGesamtStaerke() == strength) {
                     playerList2.add(p);
                 }
             }
@@ -730,7 +732,7 @@
         List<Player> playerList2 = new ArrayList<>();
         int stärkeToHave = 100 - gesamtStärke;
         List<Player> player = getPlayer();
-        if(player==null) return null;
+        if (player == null) return null;
         for (Player p : player) {
             if (p.getGesamtStaerke() == stärkeToHave) {
                 playerList2.add(p);
@@ -858,8 +860,7 @@
         for (Match match : allRequestedMatchesFriend) {
             if (match.pending && match.receiverUserID == userID) {
                 System.out.print("Already requested, Played match: \t");
-                int i = acceptMatchRequest(userID, friendName);
-                System.out.println(i);
+                acceptMatchRequest(getMatchFromName(userID, friendName));
                 return true;
             }
         }
@@ -928,203 +929,37 @@
 
     }
 
-    public static int acceptMatchRequest(int userID, String friendName) {
+    public static Match getMatchFromName(int userID, String friendName) {
         User userWithName = findUserWithName(friendName);
         int friendID = userWithName.id;
         List<Match> allReceivedMatches = getAllReceivedMatches(userID);
-        Match currentMatch = null;
         for (Match match : allReceivedMatches) {
             if (match.senderUserID == friendID) {
                 if (match.pending) {
-                    currentMatch = match;
-                    break;
+                    return match;
                 }
             }
         }
-        if (currentMatch == null) {
-            return -2;
-        }
-        List<Player> startElfUser = getStartElf(userID);
-        List<Player> startElfFriend = getStartElf(friendID);
-
-        if (startElfUser.size() < 11 || startElfFriend.size() < 11) {
-            System.out.println("Startelf nicht vorhanden");
-            return -1;
-        }
-
-        String lineup = identLineUp(startElfUser);
-        String lineupfriend = identLineUp(startElfFriend);
-
-        //int lineUpBonus = getLineUpBonus(lineup, lineupfriend);
-
-        //int durchschnittStärkeTeam = getDurchschnittStärkeTeam(startElfUser, startElfFriend, lineup, lineupfriend);
-
-        //int mfDurchschnitt = getMFDurchschnittStärke(startElfUser, startElfFriend, lineup, lineupfriend);
-
-        List<Player> team = getTeam(userID);
-        List<Player> team1 = getTeam(friendID);
-
-        //int benchStrength = getChipsaStrength(team, team1);
-
-        //int pairs = getPairStrength(startElfUser, startElfFriend);
-
-        //int randomLottery = getRandomLottery();
-
-        Random random = new Random();
-        int amount = random.nextInt(1);
-        if (amount == 0) {
-            if (!heimSpiel(userID)) {
-                System.out.println("User hat keine Assets");
-                return -1;
-            }
-        } else {
-            if (!heimSpiel(friendID)) {
-                System.out.println("Friend hat keine Assets");
-                return -1;
-            }
-        }
-        amount = random.nextInt(5);
-        ArrayList<Integer> gameList = new ArrayList<>();
-
-        for (int i = 0; i < amount; i++) {
-            gameList.add(i);
-        }
-
-        int helper = 0;
-        int resultUser = 0;
-        int resultFriend = 0;
-
-        for (int i = 0; i < amount; i++) {
-
-            int gameID = random.nextInt(gameList.size());
-
-            switch (gameID) {
-                case 0:
-                    helper = getLineUpBonus(lineup, lineupfriend);
-                    System.out.println("Game Played: LineUp.");
-                    if (helper > 0) {
-                        resultUser++;
-                    } else if (helper < 0) {
-                        resultFriend++;
-                    } else {
-                        resultFriend++;
-                        resultUser++;
-                    }
-                    break;
-                case 1:
-                    helper = getDurchschnittStärkeTeam(startElfUser, startElfFriend, lineup, lineupfriend);
-                    System.out.println("Game Played: getDurchschnittStärkeTeam.");
-
-                    if (helper > 0) {
-                        resultUser++;
-                    } else if (helper < 0) {
-                        resultFriend++;
-                    } else {
-                        resultFriend++;
-                        resultUser++;
-                    }
-                    break;
-                case 2:
-                    helper = getMFDurchschnittStärke(startElfUser, startElfFriend, lineup, lineupfriend);
-                    System.out.println("Game Played: getMFDurchschnittStärke.");
-
-                    if (helper > 0) {
-                        resultUser++;
-                    } else if (helper < 0) {
-                        resultFriend++;
-                    } else {
-                        resultFriend++;
-                        resultUser++;
-                    }
-                    break;
-                case 3:
-                    System.out.println("Game Played: getChipsaStrength.");
-
-                    helper = getChipsaStrength(team, team1);
-                    if (helper > 0) {
-                        resultUser++;
-                    } else if (helper < 0) {
-                        resultFriend++;
-                    } else {
-                        resultFriend++;
-                        resultUser++;
-                    }
-                    break;
-                case 4:
-                    System.out.println("Game Played: getPairStrength.");
-
-                    helper = getPairStrength(startElfUser, startElfFriend);
-                    if (helper > 0) {
-                        resultUser++;
-                    } else if (helper < 0) {
-                        resultFriend++;
-                    } else {
-                        resultFriend++;
-                        resultUser++;
-                    }
-                    break;
-                case 5:
-                    System.out.println("Game Played: getRandomLottery.");
-
-                    helper = getRandomLottery();
-                    if (helper > 0) {
-                        resultUser++;
-                    } else if (helper < 0) {
-                        resultFriend++;
-                    } else {
-                        resultFriend++;
-                        resultUser++;
-                    }
-                    break;
-            }
-
-            gameList.removeIf(integer -> integer == gameID);
-
-        }
-
-
-        User userFromID = getUserFromID(userID);
-        if(userFromID.getTeamName().equals("Rot-Weiss Essen") && (resultUser < resultFriend || resultUser == resultFriend)){
-            resultUser = resultFriend + random.nextInt(3) + 1;
-        }else if(userWithName.getTeamName().equals("Rot-Weiss Essen") && (resultUser > resultFriend || resultUser == resultFriend)){
-            resultFriend = resultUser + random.nextInt(3) + 1;
-        }
-
-        if (resultUser > resultFriend) {
-            System.out.println(getUserFromID(userID).teamName + " gewinnt:\t" + resultUser + " - " + resultFriend);
-            addSEP(userID, 100);
-            removePendingFromMatch(currentMatch, userID + ":" + resultUser + ":" + friendID + ":" +resultFriend);
-            return 1;
-        } else if (resultUser < resultFriend) {
-            System.out.println(getUserFromID(friendID).teamName + "gewinnt:\t" + resultUser + " - " + resultFriend);
-            addSEP(friendID, 100);
-            removePendingFromMatch(currentMatch, userID + ":" + resultUser + ":" + friendID + ":" +resultFriend);
-            return -1;
-        } else {
-            System.out.println("Unentschieden: \t" + resultUser + " - " + resultFriend);
-            removePendingFromMatch(currentMatch, userID + ":" + resultUser + ":" + friendID + ":" +resultFriend);
-            return 0;
-        }
-
+        return null;
     }
 
     public static Match acceptMatchRequest(Match match) {
+        //Bestimmen der Beiden IDs durch das Match
         int userID = match.getSenderUserID();
         int friendID = match.getReceiverUserID();
-
+        //Instanzen der User aus den IDs ziehen
         User user = getUserFromID(userID);
         User friend = getUserFromID(friendID);
-
+        //Die Liste der Spieler in der Startelf holen
         List<Player> startElfUser = getStartElf(userID);
         List<Player> startElfFriend = getStartElf(friendID);
-
-
+        //Die AUfstellung anhand der Startelf indentifizieren
         String lineup = identLineUp(startElfUser);
         String lineupfriend = identLineUp(startElfFriend);
-
+        //Das Komplette Team speichern da wir es bei der Berrechnung später benötigen
         List<Player> team = getTeam(userID);
         List<Player> team1 = getTeam(friendID);
-
+        //Münzwurf in welchem Stadion gespielt wird
         Random random = new Random();
         int amount = random.nextInt(1);
         if (amount == 0) {
@@ -1138,23 +973,27 @@
                 return null;
             }
         }
+        //Anzahl der Kriterien bestimmen
         amount = random.nextInt(5);
         ArrayList<Integer> gameList = new ArrayList<>();
-
-        for (int i = 0; i < amount; i++) {
+        for (int i = 0; i < 6; i++) {
+            //Hinzufügen von Zahlen bis 6 in eine Liste, wird später gebraucht um keine Spiele doppelt zu spielen.
             gameList.add(i);
         }
-
+        //Hilfsvariablen zum berrechnen der Tore
         int helper = 0;
         int resultUser = 0;
         int resultFriend = 0;
         System.out.println();
+        //Schleif über die anzahl der Spiele
         for (int i = 0; i < amount; i++) {
-
-            int gameID = random.nextInt(gameList.size());
-
+            //Eine zufällige Zahl wir aus der Liste genommen und gespielt.
+            //Danach wird diese Zahl aus der List gelöscht und ein neue Zahl wird gezogen
+            int gameID = gameList.get(random.nextInt(gameList.size()));
+            //Entscheid welches Spiel gespielt wird.
             switch (gameID) {
                 case 0:
+                    //helper gibt den Sieger and -1 Freund +1 User, 0 unentschieden.
                     helper = getLineUpBonus(lineup, lineupfriend);
                     System.out.print("Match: getLineUpBonus\t Winner:");
                     if (helper > 0) {
@@ -1251,32 +1090,33 @@
                     System.out.println(user.getUserName() + ": " + resultUser + " - " + friend.getUserName() + ": " + resultFriend);
                     break;
             }
-
+            //Entfernen der zahl aus der liste.
             gameList.removeIf(integer -> integer == gameID);
 
         }
         System.out.println();
-        if(user.getTeamName().equals("Rot-Weiss Essen") && (resultUser < resultFriend || resultUser == resultFriend)){
+        //Falls das Team Rot-Weiss Essen heißt kann es nicht verlieren und das ergebnis wird umgeschrieben.
+        if (user.getTeamName().equals("Rot-Weiss Essen") && (resultUser < resultFriend || resultUser == resultFriend)) {
             resultUser = resultFriend + random.nextInt(3) + 1;
-        }else if(friend.getTeamName().equals("Rot-Weiss Essen") && (resultUser > resultFriend || resultUser == resultFriend)){
+        } else if (friend.getTeamName().equals("Rot-Weiss Essen") && (resultUser > resultFriend || resultUser == resultFriend)) {
             resultFriend = resultUser + random.nextInt(3) + 1;
         }
-
+        //Der Gewinner wird gespeichert und das spiel ist nicht mehr pending also wartent
         if (resultUser > resultFriend) {
             System.out.println(getUserFromID(userID).teamName + " gewinnt:\t" + resultUser + " - " + resultFriend);
-            match.setResult(userID + ":" + resultUser + ":" + friendID + ":" +resultFriend);
+            match.setResult(userID + ":" + resultUser + ":" + friendID + ":" + resultFriend);
             match.setPending(false);
             addMatchToDatabase(match);
             return match;
         } else if (resultUser < resultFriend) {
             System.out.println(getUserFromID(friendID).teamName + " gewinnt:\t" + resultUser + " - " + resultFriend);
-            match.setResult(userID + ":" + resultUser + ":" + friendID + ":" +resultFriend);
+            match.setResult(userID + ":" + resultUser + ":" + friendID + ":" + resultFriend);
             match.setPending(false);
             addMatchToDatabase(match);
             return match;
         } else {
             System.out.println("Unentschieden: \t" + resultUser + " - " + resultFriend);
-            match.setResult(userID + ":" + resultUser + ":" + friendID + ":" +resultFriend);
+            match.setResult(userID + ":" + resultUser + ":" + friendID + ":" + resultFriend);
             match.setPending(false);
             addMatchToDatabase(match);
             return match;
@@ -1288,28 +1128,7 @@
 
         Transaction transaction = null;
         try (Session session = HibernateUtil.getSessionFactory().openSession()) {
-            session.save(match);
-            transaction = session.beginTransaction();
-            transaction.commit();
-            session.close();
-            return 1;
-        } catch (Exception e) {
-            if (transaction != null) {
-                transaction.rollback();
-            }
-            e.printStackTrace();
-            return -1;
-        }
-
-    }
-
-    private static int removePendingFromMatch(Match match, String result) {
-        Transaction transaction = null;
-        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
-            match = session.get(Match.class, match.id);
-            match.pending = false;
-            match.setResult(result);
-            session.update(match);
+            session.saveOrUpdate(match);
             transaction = session.beginTransaction();
             transaction.commit();
             session.close();
@@ -1423,9 +1242,8 @@
 
         Random random = new Random();
 
-        int i = random.nextInt(1);
-        int i2 = random.nextInt(1);
-
+        int i = random.nextInt(2);
+        int i2 = random.nextInt(2);
         if (i > i2) {
             return 1;
         } else if (i < i2) {
@@ -1513,7 +1331,7 @@
         for (Player p : startElfUser) {
             switch (p.getPos()) {
                 case "TW":
-                    tw = (int)p.getGesamtStaerke();
+                    tw = (int) p.getGesamtStaerke();
                     break;
                 case "DF":
                     df += p.getGesamtStaerke();
@@ -1539,7 +1357,7 @@
         for (Player p : startElfFriend) {
             switch (p.getPos()) {
                 case "TW":
-                    twFriend = (int)p.getGesamtStaerke();
+                    twFriend = (int) p.getGesamtStaerke();
                     break;
                 case "DF":
                     dfFriend += p.getGesamtStaerke();
@@ -1756,6 +1574,7 @@
             return -1;
         }
     }
+
     //TODO 6
     public static List<Assets> getAssets() {
         Transaction transaction = null;
@@ -1770,7 +1589,8 @@
             return null;
         }
     }
-//TODO 6
+
+    //TODO 6
     public static int upgradeAssets(int userID, int asset) {
         Assets assetToUpdate = getAssetFromUser(userID);
         Transaction transaction = null;
@@ -1795,7 +1615,7 @@
 
     public static int initTournementLiga(int userID, String name, boolean type, int fee, int maxAnzahl) {
         User userFromID = getUserFromID(userID);
-        if(userFromID.getsEPS() < fee){
+        if (userFromID.getsEPS() < fee) {
             return -3;
         }
         List<Tournement> allTournements = getAllTournements();
@@ -1807,7 +1627,7 @@
                 return -2;
             }
         }
-        addSEP(userID,-fee);
+        addSEP(userID, -fee);
         Transaction transaction = null;
         try (Session session = HibernateUtil.getSessionFactory().openSession()) {
             transaction = session.beginTransaction();
@@ -1874,10 +1694,10 @@
             return -4;
         }
         Tournement tournement = getTournementByName(tournementName);
-        if(tournement.getFee() > userFromID.getsEPS()){
+        if (tournement.getFee() > userFromID.getsEPS()) {
             return -5;
         }
-        if(!tournement.isPending()){
+        if (!tournement.isPending()) {
             return -3;
         }
         List<Integer> contestantList = tournement.getContestantID();
@@ -1887,7 +1707,7 @@
             }
         }
 
-        addSEP(userID,-tournement.getFee());
+        addSEP(userID, -tournement.getFee());
 
         Transaction transaction = null;
         try (Session session = HibernateUtil.getSessionFactory().openSession()) {
@@ -2007,28 +1827,28 @@
         MatchWrapper matchWrapper = new MatchWrapper();
         int[] resultFromMatch = getResultFromMatch(match);
 
-        if(resultFromMatch[0] == UserID){
+        if (resultFromMatch[0] == UserID) {
 
             User userFromID = getUserFromID(resultFromMatch[2]);
 
             matchWrapper.setName(userFromID.getUserName());
             matchWrapper.setTeamName(userFromID.getTeamName());
             matchWrapper.setResult(match.getResult());
-            if(resultFromMatch[1] > resultFromMatch[3]){
+            if (resultFromMatch[1] > resultFromMatch[3]) {
                 matchWrapper.setWin(true);
-            }else{
+            } else {
                 matchWrapper.setWin(false);
             }
 
-        }else{
+        } else {
             User userFromID = getUserFromID(resultFromMatch[0]);
 
             matchWrapper.setName(userFromID.getUserName());
             matchWrapper.setTeamName(userFromID.getTeamName());
             matchWrapper.setResult(match.getResult());
-            if(resultFromMatch[3] > resultFromMatch[1]){
+            if (resultFromMatch[3] > resultFromMatch[1]) {
                 matchWrapper.setWin(true);
-            }else{
+            } else {
                 matchWrapper.setWin(false);
             }
         }
@@ -2085,39 +1905,39 @@
 
         int gewinn = t.getContestantID().size() * t.getFee();
         gewinn = gewinn / 6;
-        if(t.getType().equals("Knock-Out")){
+        if (t.getType().equals("Knock-Out")) {
 
             ArrayList<MatchWrapper> tMatches = getTMatches(t.getName());
             ArrayList<MatchWrapper> trim = trim(tMatches);
-            int i = getLoserFromMatch(trim.get(trim.size()-3).getResult());
-            int i2 = getLoserFromMatch(trim.get(trim.size()-5).getResult());
+            int i = getLoserFromMatch(trim.get(trim.size() - 3).getResult());
+            int i2 = getLoserFromMatch(trim.get(trim.size() - 5).getResult());
             int[] winnerFromResult1;
-            Match match = new Match(i,i2);
+            Match match = new Match(i, i2);
             Match match1;
-            do{
+            do {
                 match1 = acceptMatchRequest(match);
                 winnerFromResult1 = getWinnerFromResult(match1.getResult());
-            }while(winnerFromResult1 == null);
+            } while (winnerFromResult1 == null);
 
             t.addMatch(match1.getId());
             updateTournement(t);
-            addSEP(winnerFromResult1[0],gewinn);
+            addSEP(winnerFromResult1[0], gewinn);
             System.out.println(winnerFromResult1[0] + " bekommt: " + gewinn);
 
             String result = trim.get(trim.size() - 1).result;
             int[] winnerFromResult = getWinnerFromResult(result);
 
-            addSEP(winnerFromResult[0],gewinn*3);
+            addSEP(winnerFromResult[0], gewinn * 3);
             System.out.println(winnerFromResult[0] + " bekommt: " + gewinn * 4);
-            addSEP(winnerFromResult[1],gewinn*2);
+            addSEP(winnerFromResult[1], gewinn * 2);
             System.out.println(winnerFromResult[1] + " bekommt: " + gewinn * 2);
-        }else{
+        } else {
 
             ArrayList<MatchWrapper> tMatches = getTMatches(t.getName());
             ArrayList<HelperClass> helperClasses = matchListToHelperClass(tMatches);
             for (int i = 0; i < 3; i++) {
-                addSEP(findUserWithName(helperClasses.get(i).getName()).getId(),gewinn * (3-i));
-                System.out.println(findUserWithName(helperClasses.get(i).getName())+ " bekommt: " + gewinn * (3-i));
+                addSEP(findUserWithName(helperClasses.get(i).getName()).getId(), gewinn * (3 - i));
+                System.out.println(findUserWithName(helperClasses.get(i).getName()) + " bekommt: " + gewinn * (3 - i));
 
             }
 
@@ -2135,11 +1955,11 @@
         int score1 = Integer.parseInt(split[1]);
         int score2 = Integer.parseInt(split[3]);
 
-        if(score1 > score2){
+        if (score1 > score2) {
             return id2;
-        }else if(score2 > score1){
+        } else if (score2 > score1) {
             return id1;
-        }else{
+        } else {
             return 0;
         }
 
@@ -2157,7 +1977,7 @@
         String name = "";
         int i = 0;
         for (MatchWrapper m : matchList) {
-            if(!m.getName().equals(name) && !name.equals("")){
+            if (!m.getName().equals(name) && !name.equals("")) {
                 break;
             }
             i++;
@@ -2170,30 +1990,30 @@
         int counter = 0;
         int tore = 0;
         for (MatchWrapper m : matchList) {
-            if(m.getGoals().split(" : ")[0].equals("Unentschieden")){
+            if (m.getGoals().split(" : ")[0].equals("Unentschieden")) {
                 tore += Integer.parseInt(m.getGoals().split(" : ")[1]);
                 punkte += 1;
-            }else if(m.getGoals().split(" : ")[0].equals("Gewonnen")){
+            } else if (m.getGoals().split(" : ")[0].equals("Gewonnen")) {
                 int i1 = Integer.parseInt(m.getGoals().split(" : ")[1]);
                 int i2 = Integer.parseInt(m.getGoals().split(" : ")[2]);
-                if(i1 > i2){
+                if (i1 > i2) {
                     tore += i1;
-                }else{
+                } else {
                     tore += i2;
                 }
                 punkte += 3;
-            }else{
+            } else {
                 int i1 = Integer.parseInt(m.getGoals().split(" : ")[1]);
                 int i2 = Integer.parseInt(m.getGoals().split(" : ")[2]);
-                if(i1 < i2){
+                if (i1 < i2) {
                     tore += i1;
-                }else{
+                } else {
                     tore += i2;
                 }
             }
             counter++;
-            if(counter == i){
-                helperClasses.add(matchWrapperToHelperClass(m,punkte,tore));
+            if (counter == i) {
+                helperClasses.add(matchWrapperToHelperClass(m, punkte, tore));
                 tore = 0;
                 punkte = 0;
                 counter = 0;
@@ -2203,10 +2023,10 @@
         helperClasses.sort(new Comparator<HelperClass>() {
             @Override
             public int compare(HelperClass helperClass, HelperClass t1) {
-                if(Integer.compare(helperClass.getPunkte(),t1.getPunkte()) == 0){
-                    return Integer.compare(helperClass.getTore(),t1.getTore()) * (-1);
+                if (Integer.compare(helperClass.getPunkte(), t1.getPunkte()) == 0) {
+                    return Integer.compare(helperClass.getTore(), t1.getTore()) * (-1);
                 }
-                return Integer.compare(helperClass.getPunkte(),t1.getPunkte()) * (-1);
+                return Integer.compare(helperClass.getPunkte(), t1.getPunkte()) * (-1);
             }
         });
         counter = 1;
@@ -2228,6 +2048,7 @@
         return helperClass;
 
     }
+
     private static int[] getWinnerFromResult(String result) {
 
         String[] split = result.split(":");
@@ -2238,18 +2059,18 @@
         int score1 = Integer.parseInt(split[1]);
         int score2 = Integer.parseInt(split[3]);
 
-        if(score1 > score2){
-            return new int[]{id1,id2};
-        }else if(score2 > score1){
-            return new int[]{id2,id1};
-        }else{
+        if (score1 > score2) {
+            return new int[]{id1, id2};
+        } else if (score2 > score1) {
+            return new int[]{id2, id1};
+        } else {
             return null;
         }
 
     }
 
     private static ArrayList<MatchWrapper> trim(ArrayList<MatchWrapper> tMatches) {
-        for (Iterator<MatchWrapper> iterator = tMatches.iterator(); iterator.hasNext();) {
+        for (Iterator<MatchWrapper> iterator = tMatches.iterator(); iterator.hasNext(); ) {
             MatchWrapper mw = iterator.next();
             String[] split = mw.getResult().split(":");
             if (Integer.valueOf(split[1]) == Integer.valueOf(split[3])) {
@@ -2258,6 +2079,7 @@
         }
         return tMatches;
     }
+
     private static void playLigaMatches(ArrayList<Integer> playerlist, Tournement t) {
         for (int i = 0; i < playerlist.size(); i++) {
             for (int j = i + 1; j < playerlist.size(); j++) {
@@ -2359,6 +2181,7 @@
         return null;
 
     }
+
     //TODO 6
     public static int updateAsset(int userID, String s) {
         Assets assetFromUser = getAssetFromUser(userID);
Index: src/test/java/Client/JSONTest.java
===================================================================
--- src/test/java/Client/JSONTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Client/JSONTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,31 +0,0 @@
-package Client;
-
-import Server.DatabaseController;
-import org.junit.Test;
-
-import javax.xml.crypto.Data;
-import java.sql.Date;
-import java.util.Arrays;
-import java.util.List;
-
-
-public class JSONTest {
-
-    @Test
-    public void splitTest(){
-
-        String [] strings = "MF".split("-");
-        System.out.println(strings[0]);
-    }
-
-    @Test
-    public void JSONConverterTest(){
-
-        List<Server.User> userList = DatabaseController.getUser();
-        String s = Server.JSONUtilClass.convertToJSONList(userList, null);
-
-        List<User> users = JSONUtilClass.convertFromJSONUserList(s);
-        System.out.println(users);
-
-    }
-}
Index: src/test/java/Client/DatenbankTest.java
===================================================================
--- src/test/java/Client/DatenbankTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Client/DatenbankTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,19 +0,0 @@
-package Client;
-
-import Server.DatabaseController;
-import org.junit.Test;
-
-import java.util.ArrayList;
-
-public class DatenbankTest {
-
-    @Test
-    public void TestFX(){
-
-        String teamNamen = DatabaseController.getTeamNamen(7);
-        System.out.println(teamNamen);
-
-    }
-
-
-}
Index: src/test/java/Server/NachrichtenTest.java
===================================================================
--- src/test/java/Server/NachrichtenTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/NachrichtenTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,4 +0,0 @@
-package Server;
-
-public class NachrichtenTest {
-}
Index: src/test/java/Server/Scrappertest.java
===================================================================
--- src/test/java/Server/Scrappertest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/Scrappertest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,30 +0,0 @@
-package Server;
-
-import Client.ClientConnection;
-import Client.Main;
-import Client.MatchWrapper;
-import Client.testMainServer;
-import Server.Scrapper;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
-import org.jsoup.select.Elements;
-import org.junit.Test;
-
-import java.io.IOException;
-import java.util.List;
-import java.util.Locale;
-
-public class Scrappertest {
-
-    @Test
-    public void scrapperTest(){
-
-        Scrapper.getNames();
-
-    }
-
-    @Test
-    public void scrapperplayerSiteTest() throws IOException {
-
-    }
-}
Index: src/test/java/Client/FXTest.java
===================================================================
--- src/test/java/Client/FXTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Client/FXTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,57 +0,0 @@
-package Client;
-
-import Server.EntryPointServer;
-import org.junit.Test;
-
-public class FXTest {
-
-	@Test
-	public void TestFX() throws InterruptedException {
-
-		Thread thread = new Thread() {
-			public void run() {
-
-				testMainServer.main(null);
-			}
-		};
-		thread.start();
-		Thread.sleep(1000000);
-		//Main.main(null);
-
-	}
-	@Test
-	public void TestFX3() throws InterruptedException {
-
-		EntryPointServer.main(null);
-
-	}
-	@Test
-	public void TestFX2(){
-
-		/*Thread thread = new Thread() {
-			public void run() {
-
-				testMainServer.main(null);
-			}
-		};
-		thread.start();*/
-
-		Main.main(null);
-
-	}
-
-	@Test
-	public void testMatchFenster(){
-
-		Thread thread = new Thread() {
-			public void run() {
-
-				testMainServer.main(null);
-			}
-		};
-		thread.start();
-
-		Main.main(null);
-
-	}
-}
Index: src/test/java/Server/MatchTest.java
===================================================================
--- src/test/java/Server/MatchTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/MatchTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,56 +0,0 @@
-package Server;
-
-import org.junit.Test;
-
-import java.util.List;
-
-public class MatchTest {
-
-    @Test
-    public void matchRequest() {
-
-        boolean b = DatabaseController.sendMatchRequest(7, "Pascale");
-        System.out.println(b);
-    }
-
-    @Test
-    public void matchTest() {
-        for (int i = 0; i < 10; i++) {
-            boolean b = DatabaseController.sendMatchRequest(7, "Pascale");
-            int i2 = DatabaseController.acceptMatchRequest(8, "Pascal");
-        }
-    }
-
-    @Test
-    public void getAllmatchRequests() {
-
-        List<Match> allRequestedMatches = DatabaseController.getAllRequestedMatches(7);
-        System.out.println(allRequestedMatches);
-    }
-
-    @Test
-    public void getAllmatchReceived() {
-
-        List<Match> allRequestedMatches = DatabaseController.getAllReceivedMatches(8);
-        System.out.println(allRequestedMatches);
-    }
-
-    @Test
-    public void acceptMatchRequest() {
-        int i2 = DatabaseController.acceptMatchRequest(8, "Pascal");
-        System.out.println(i2);
-
-    }
-    @Test
-    public void getMatchHistoryTest() {
-        List<Match> matchHistory = DatabaseController.getMatchHistory(8);
-        System.out.println(matchHistory);
-
-    }
-
-    @Test
-    public void addSEP() {
-        DatabaseController.addSEP(7, 2);
-    }
-
-}
Index: src/test/java/Client/testMainServer.java
===================================================================
--- src/test/java/Client/testMainServer.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Client/testMainServer.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,15 +0,0 @@
-package Client;
-
-import Server.Server_Socket;
-
-public class testMainServer {
-
-	public static void main(String[] args) {
-
-
-        Server_Socket server_socket = new Server_Socket();
-        server_socket.run();
-
-    }
-
-}
Index: src/test/java/Server/RotWeissEssenCheatTest.java
===================================================================
--- src/test/java/Server/RotWeissEssenCheatTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/RotWeissEssenCheatTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,206 +0,0 @@
-package Server;
-
-import Client.ClientConnection;
-import Client.testMainServer;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-
-public class RotWeissEssenCheatTest {
-
-    User userToTest = null;
-    User userToTest2 = null;
-
-    final String player1Name = "test";
-    final String player2Name = "test1";
-
-    @Test
-    public void tTest(){
-        for (int i = 2; i < 11; i++) {
-            userToTest = createNewUser("test" + i);
-            addPlayersToUserRandom(userToTest);
-        }
-    }
-
-    @Before
-    public void setup(){
-        List<User> user = DatabaseController.getUser();
-
-        for (User u:user) {
-            if(u.getUserName().equals(player1Name)){
-                userToTest = u;
-            }
-            if(u.getUserName().equals(player2Name)){
-                userToTest2 = u;
-            }
-        }
-
-        if(userToTest == null){
-            userToTest = createNewUser(player1Name);
-            addPlayersToUser(userToTest);
-        }
-        if(userToTest2 == null){
-            userToTest2 = createNewUser(player2Name);
-            addPlayersToUser(userToTest2);
-        }
-    }
-
-    @Test
-    public void testRotWeisEssen(){
-
-        userToTest.setTeamName("Default");
-        DatabaseController.updateUser(userToTest,userToTest.id);
-        for (int i = 0; i < 5; i++) {
-            Match match = new Match();
-            match.setSenderUserID(userToTest.getId());
-            match.setReceiverUserID(userToTest2.getId());
-            DatabaseController.acceptMatchRequest(match);
-
-        }
-        userToTest.setTeamName("Rot-Weiss Essen");
-        DatabaseController.updateUser(userToTest,userToTest.id);
-        for (int i = 0; i < 5; i++) {
-            Match match = new Match();
-            match.setSenderUserID(userToTest.getId());
-            match.setReceiverUserID(userToTest2.getId());
-            DatabaseController.acceptMatchRequest(match);
-
-        }
-
-    }
-
-    public void addPlayersToUser(User userToTest) {
-
-        List<Player> player = DatabaseController.getPlayer();
-        List<Player> player1 = new ArrayList<>();
-        int [] aufstellung = {1,4,4,2};
-
-        for (Player p:player) {
-            switch (p.getPos()){
-                case "FW":
-                    if(aufstellung[3] > 0){
-                        aufstellung[3]--;
-                        player1.add(p);
-                    }
-                    break;
-                case "TW":
-                    if(aufstellung[0] > 0){
-                        aufstellung[3]--;
-                        player1.add(p);
-                    }
-                    break;
-                case "MF":
-                    if(aufstellung[2] > 0){
-                        aufstellung[2]--;
-                        player1.add(p);
-                    }
-                    break;
-                case "DF":
-                    if(aufstellung[1] > 0){
-                        aufstellung[1]--;
-                        player1.add(p);
-                    }
-                    break;
-
-            }
-            if(player1.size() == 11){
-                break;
-            }
-        }
-
-
-        for (Player p:player1) {
-            Team team = new Team();
-            team.setUserID(userToTest.getId());
-            team.setPlayerID(p.getId());
-            DatabaseController.addPlayerToTeam2(team);
-
-        }
-
-
-
-    }
-    public void addPlayersToUserRandom(User userToTest) {
-
-        List<Player> player = DatabaseController.getPlayer();
-        List<Player> player1 = new ArrayList<>();
-        int [] aufstellung = {1,4,4,2};
-        Random random = new Random();
-        while (true) {
-            Player p = player.get(random.nextInt(player.size()));
-            if(player1.contains(p)){
-                continue;
-            }
-            switch (p.getPos()){
-                case "FW":
-                    if(aufstellung[3] > 0){
-                        aufstellung[3]--;
-                        player1.add(p);
-                    }
-                    break;
-                case "TW":
-                    if(aufstellung[0] > 0){
-                        aufstellung[3]--;
-                        player1.add(p);
-                    }
-                    break;
-                case "MF":
-                    if(aufstellung[2] > 0){
-                        aufstellung[2]--;
-                        player1.add(p);
-                    }
-                    break;
-                case "DF":
-                    if(aufstellung[1] > 0){
-                        aufstellung[1]--;
-                        player1.add(p);
-                    }
-                    break;
-
-            }
-            if(player1.size() == 11){
-                break;
-            }
-        }
-
-
-        for (Player p:player1) {
-            Team team = new Team();
-            team.setUserID(userToTest.getId());
-            team.setPlayerID(p.getId());
-            DatabaseController.addPlayerToTeam2(team);
-
-        }
-
-
-
-    }
-
-    private User createNewUser(String s) {
-        List<User> user2 = DatabaseController.getUser();
-        for (User u: user2) {
-            if(u.getUserName().equals(s)){
-                return u;
-            }
-        }
-        User newUser = new User(s,s,s);
-        newUser.setTeamName("Default");
-        newUser.setTeamName("Default");
-        DatabaseController.saveUser(newUser);
-
-        List<User> user = DatabaseController.getUser();
-        for (User u:user) {
-            if(u.getUserName().equals(s)){
-                newUser = u;
-            }
-        }
-
-        DatabaseController.initAssets(newUser.getId());
-
-        return newUser;
-    }
-}
Index: src/test/java/Scrappertest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/Scrappertest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Scrappertest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,25 +0,0 @@
-import Client.Main;
-import Client.testMainServer;
-import Server.Scrapper;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
-import org.jsoup.select.Elements;
-import org.junit.Test;
-
-import java.io.IOException;
-import java.util.Locale;
-
-public class Scrappertest {
-
-    @Test
-    public void scrapperTest(){
-
-        Scrapper.errechneGesamtStärkeAnders();
-
-    }
-
-    @Test
-    public void scrapperplayerSiteTest() throws IOException {
-
-    }
-}
Index: src/test/java/Server/AssetTest.java
===================================================================
--- src/test/java/Server/AssetTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/AssetTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,30 +0,0 @@
-package Server;
-
-import org.junit.Test;
-
-import java.util.List;
-
-public class AssetTest {
-
-    @Test
-    public void saveAsset(){
-
-        int i = DatabaseController.initAssets(9);
-        System.out.println(i);
-    }
-
-    @Test
-    public void heimSpiel(){
-
-        boolean b = DatabaseController.heimSpiel(7);
-        System.out.println(b);
-    }
-
-    @Test
-    public void upgradeAsset(){
-
-        int i = DatabaseController.upgradeAssets(7, 1);
-        System.out.println(i);
-    }
-
-}
Index: src/test/java/addGesamtstrength.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/addGesamtstrength.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/addGesamtstrength.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,21 +0,0 @@
-import Server.Scrapper;
-import org.junit.Test;
-
-public class addGesamtstrength {
-
-    @Test
-    public void getPlayerScreachResults() {
-        try {
-            Scrapper.setScreachresults();
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-        }
-
-    }
-
-    @Test
-    public void setGesamtstärke() {
-        Scrapper.errechneGesamtStärke();
-    }
-
-}
Index: src/test/java/Server/TestLootbox.java
===================================================================
--- src/test/java/Server/TestLootbox.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/TestLootbox.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,62 +0,0 @@
-package Server;
-
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class TestLootbox {
-
-    @Test
-    public void testStartLootbox(){
-
-        List<Player> playerList = DatabaseController.openStartLootBox(7);
-        //Richtige Größe
-        assert(playerList.size() == 22);
-        int allStringth = 0;
-        ArrayList<Player> twList = new ArrayList<>();
-        ArrayList<Player> dfList = new ArrayList<>();
-        ArrayList<Player> mfList = new ArrayList<>();
-        ArrayList<Player> fwList = new ArrayList<>();
-        for (Player player:playerList) {
-            allStringth += player.getGesamtStaerke();
-            switch(player.getPos()){
-                case "TW":twList.add(player);
-                    break;
-                case "DF":dfList.add(player);
-                    break;
-                case "MF":mfList.add(player);
-                    break;
-                case "FW":fwList.add(player);
-                    break;
-            }
-        }
-        //Richtigen Mittelwert der Stärke
-        allStringth /= 22;
-        assert(allStringth == 50);
-
-        //Richtige Aufteilung der Positionen
-        assert(twList.size() == 2);
-        assert(dfList.size() == 7);
-        assert(mfList.size() == 10);
-        assert(fwList.size() == 3);
-
-        List<Player> team = DatabaseController.getTeam(7);
-
-        for (Player p : playerList) {
-            //Richtige Speicherung in die Datenbank
-            assert (team.contains(p));
-        }
-
-        for (int j = 0; j < playerList.size(); j++) {
-            for (int j2 = 0; j2 < playerList.size(); j2++) {
-                if (playerList.get(j).equals(playerList.get(j2)) && j != j2){
-                    //Keine Duplikate
-                    assert(false);
-                }
-            }
-        }
-
-    }
-
-}
Index: src/test/java/Server/TournementTest.java
===================================================================
--- src/test/java/Server/TournementTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/TournementTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,36 +0,0 @@
-package Server;
-
-import org.junit.Test;
-
-import java.util.List;
-
-public class TournementTest {
-
-    @Test
-    public void saveTournement(){
-
-        int i = DatabaseController.initTournementLiga(7,"Hallo",true,10,4);
-        System.out.println(i);
-    }
-
-    @Test
-    public void getAllTournement(){
-        DatabaseController.addUserToTournement(8, "Tschau");
-
-    }
-
-    @Test
-    public void addContestant(){
-        int i = DatabaseController.initTournementLiga(2,"testT1",true,10,8);
-        for (int j =1; j < 9; j++) {
-            DatabaseController.addUserToTournement(j,"testT1");
-        }
-        DatabaseController.beginTournement("testT1");
-    }
-
-    @Test
-    public void beginTournement(){
-        DatabaseController.beginTournement("Hallo");
-    }
-
-}
Index: src/test/java/Client/TestLootbox.java
===================================================================
--- src/test/java/Client/TestLootbox.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Client/TestLootbox.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,67 +0,0 @@
-package Client;
-
-import Server.DatabaseController;
-import Server.Player;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class TestLootbox {
-
-    @Test
-    public void testStartLootbox(){
-        //UserID auswähölen
-        int UserID = 1;
-        //Methode um Lootbox zu öffnen
-        List<Player> playerList = null;
-        //Richtige Größe
-        assert(playerList.size() == 22);
-        int allStringth = 0;
-        ArrayList<Player> twList = new ArrayList<>();
-        ArrayList<Player> dfList = new ArrayList<>();
-        ArrayList<Player> mfList = new ArrayList<>();
-        ArrayList<Player> fwList = new ArrayList<>();
-        for (Player player:playerList) {
-            allStringth += player.getGesamtStaerke();
-            switch(player.getPos()){
-                case "TW":twList.add(player);
-                    break;
-                case "DF":dfList.add(player);
-                    break;
-                case "MF":mfList.add(player);
-                    break;
-                case "FW":fwList.add(player);
-                    break;
-            }
-        }
-        //Richtigen Mittelwert der Stärke
-        allStringth /= 22;
-        assert(allStringth == 50);
-
-        //Richtige Aufteilung der Positionen
-        assert(twList.size() == 2);
-        assert(dfList.size() == 7);
-        assert(mfList.size() == 10);
-        assert(fwList.size() == 3);
-
-        //Methode um das Team zu erhalten
-        List<Player> team = null;
-
-        for (Player p : playerList) {
-            //Richtige Speicherung in die Datenbank
-            assert (team.contains(p));
-        }
-
-        for (int j = 0; j < playerList.size(); j++) {
-            for (int j2 = 0; j2 < playerList.size(); j2++) {
-                if (playerList.get(j).equals(playerList.get(j2)) && j != j2){
-                    //Keine Duplikate
-                    assert(false);
-                }
-            }
-        }
-
-    }
-
-}
Index: src/test/java/Client/ServerTest.java
===================================================================
--- src/test/java/Client/ServerTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Client/ServerTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,411 +0,0 @@
-package Client;
-
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.List;
-
-import static org.junit.Assert.assertNotNull;
-
-public class ServerTest {
-
-    @Test
-    public void postUserTest() {
-
-        /*Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();*/
-        ClientConnection.postUSER("Pascalee", "Bergee", "pascal@bergee");
-
-    }
-
-    @Test
-    public void getUserTest() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        try {
-            Thread.sleep(1000000000);
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-        }
-        // assertNotNull(ClientConnection.checkLogin("Pascal","Berg"));
-    }
-
-
-    @Test
-    public void getPlayerTest() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        ClientConnection.checkLogin("test", "test");
-        List<MatchWrapper> matchHistory = ClientConnection.getMatchHistory();
-
-        int siege = 0;
-        int unentschieden = 0;
-        int niederlagen = 0;
-
-        int tore = 0;
-        int gegenTore = 0;
-
-        for (MatchWrapper m:matchHistory) {
-            String[] split = m.getGoals().split(" : ");
-            int i1 = Integer.parseInt(split[1]);
-            int i2 = Integer.parseInt(split[2]);
-            switch (split[0]){
-                case "Unentschieden":
-                    tore += i1;
-                    gegenTore += i2;
-                    unentschieden++;
-                    break;
-                case "Verloren":
-                    if(i1 > i2){
-                        tore += i2;
-                        gegenTore += i1;
-                    }else{
-                        tore += i1;
-                        gegenTore += i2;
-                    }
-                    niederlagen++;
-                    break;
-                case "Gewonnen":
-                    if(i1 > i2){
-                        tore += i1;
-                        gegenTore += i2;
-                    }else{
-                        tore += i2;
-                        gegenTore += i1;
-                    }
-                    siege++;
-                    break;
-            }
-        }
-        System.out.println("Siege:\t" + siege);
-        System.out.println("Niederlagen:\t" + niederlagen);
-        System.out.println("Unentschieden:\t" + unentschieden);
-        System.out.println("Tore:\t" + tore);
-        System.out.println("Gegentore:\t" + gegenTore);
-
-    }
-
-    @Test
-    public void getmatchHistorytest() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-
-        ClientConnection.checkLogin("Pascal", "Berg");
-
-        List<MatchWrapper> matchList = ClientConnection.getMatchFromT("Tschau");
-
-        ArrayList<HelperClass> helperClasses = matchListToHelperClass(matchList);
-
-        System.out.println(helperClasses);
-
-    }
-
-    private ArrayList<HelperClass> matchListToHelperClass(List<MatchWrapper> matchList) {
-
-
-        matchList.sort(new Comparator<MatchWrapper>() {
-            @Override
-            public int compare(MatchWrapper matchWrapper, MatchWrapper t1) {
-                return matchWrapper.getName().compareTo(t1.getName());
-            }
-        });
-        String name = "";
-        int i = 0;
-        for (MatchWrapper m : matchList) {
-            if(!m.getName().equals(name) && !name.equals("")){
-                break;
-            }
-            i++;
-            name = m.getName();
-        }
-        System.out.println(i);
-
-        ArrayList<HelperClass> helperClasses = new ArrayList<>();
-
-        int punkte = 0;
-        int counter = 0;
-
-        for (MatchWrapper m : matchList) {
-            if(m.getGoals().split(" : ")[0].equals("Unentschieden")){
-                punkte += 1;
-            }else if(m.getGoals().split(" : ")[0].equals("Gewonnen")){
-                punkte += 3;
-            }
-            counter++;
-            if(counter == i){
-                helperClasses.add(matchWrapperToHelperClass(m,punkte));
-                punkte = 0;
-                counter = 0;
-            }
-        }
-
-        helperClasses.sort(new Comparator<HelperClass>() {
-            @Override
-            public int compare(HelperClass helperClass, HelperClass t1) {
-                return Integer.compare(helperClass.getPunkte(),t1.getPunkte()) * (-1);
-            }
-        });
-        counter = 1;
-        HelperClass prev = helperClasses.get(0);
-        for (HelperClass h : helperClasses) {
-            if(prev.getPunkte() == h.getPunkte()){
-                h.setPlatz(counter);
-            }else{
-                h.setPlatz(++counter);
-            }
-            prev = h;
-        }
-
-        return helperClasses;
-
-    }
-
-    private HelperClass matchWrapperToHelperClass(MatchWrapper m,int punkte) {
-
-        HelperClass helperClass = new HelperClass();
-        helperClass.setPunkte(punkte);
-        helperClass.setName(m.getName());
-        helperClass.setTeamName(m.getTeamName());
-        return helperClass;
-
-    }
-
-/*
-        HelperClass helperClass = new HelperClass();
-        helperClass.Name = m.getName();
-        helperClass.teamName = m.getTeamName();
-        String[] split = m.getGoals().split(" : ");
-        if(split[0].equals("Gewonnen")){
-            helperClass.setPunkte(helperClass.getPunkte() + 3);
-        }else if(split[0].equals("Verloren")){
-            helperClass.setPunkte(helperClass.getPunkte());
-        }else{
-            helperClass.setPunkte(helperClass.getPunkte() + 1);
-        }*/
-
-
-    @Test
-    public void errorTest() {
-
-
-    }
-
-    @Test
-    public void sendFriendRequestTest() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 1;
-        String alle = ClientConnection.sendFriendInvite("hallo");
-        System.out.println(alle);
-    }
-
-    @Test
-    public void checkForPendingFriends() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 2;
-
-        List<User> users = ClientConnection.checkForPendingFriends();
-        System.out.println(users);
-
-    }
-
-    @Test
-    public void getPlayerFromTeam() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 1;
-
-        List<Player> playersFromTeam = ClientConnection.getPlayersFromTeam();
-        System.out.println(playersFromTeam);
-
-    }
-
-    @Test
-    public void openLootBox() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 1;
-
-        List<Player> playerList = ClientConnection.openLootBox(6);
-        for (Player p :
-                playerList) {
-            System.out.println(p);
-        }
-
-    }
-
-    @Test
-    public void openStartLootBox() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 1;
-
-        List<Player> playerList = ClientConnection.openStartLootBox();
-        System.out.println(playerList);
-    }
-
-    @Test
-    public void getStartelf() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 1;
-
-        List<Player> startElf = ClientConnection.getStartElf();
-        for (Player p : startElf) {
-            System.out.println(p);
-        }
-    }
-
-    @Test
-    public void getPlayersFromTeam() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 1;
-
-        List<Player> startElf = ClientConnection.getPlayersFromTeam();
-        for (Player p : startElf) {
-            System.out.println(p);
-        }
-    }
-
-    @Test
-    public void checkForNoNPendingFriends() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 2;
-
-        List<User> users = ClientConnection.checkForNonPendingFriends();
-
-        System.out.println(users);
-
-
-    }
-
-    @Test
-    public void removeFriends() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 2;
-
-        String pascal = ClientConnection.removeFriend("Pascal");
-
-        System.out.println(pascal);
-
-    }
-
-    @Test
-    public void declineFriends() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 2;
-
-        String pascal = ClientConnection.declineFriend("Pascal");
-
-        System.out.println(pascal);
-
-    }
-
-    @Test
-    public void getSeps() {
-
-        Thread thread = new Thread() {
-            public void run() {
-
-                testMainServer.main(null);
-            }
-        };
-        thread.start();
-        LoginFensterController.ID = 1;
-
-        int seps = ClientConnection.getSEPS();
-
-        System.out.println(seps);
-
-    }
-
-}
Index: src/test/java/Server/DatabaseTest.java
===================================================================
--- src/test/java/Server/DatabaseTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/Server/DatabaseTest.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
@@ -1,185 +0,0 @@
-package Server;
-
-import org.h2.engine.Database;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-public class DatabaseTest {
-
-
-    @Test
-    public void sendFriendRequestTest(){
-
-        DatabaseController.addSepToWinner(DatabaseController.getTournementByName("testT"));
-    }
-
-    @Test
-    public void matchMap(){
-        Tournement t = new Tournement("Hallo",10,4,true);
-        ArrayList<Integer> list = new ArrayList<>();
-        list.add(23);
-        list.add(53);
-        list.add(64);
-        list.add(86);
-        t.setContestantID(list);
-        HashMap<Integer, Integer> integerIntegerHashMap = DatabaseController.setupMatchesKnockOut(list);
-        System.out.println(integerIntegerHashMap);
-    }
-
-    @Test
-    public void sendFriendRequestTest2(){
-
-        List<Match> matchHistory = DatabaseController.getMatchHistory(8);
-
-        System.out.println(DatabaseController.matchWrapperFromMatch(matchHistory.get(0),8));
-    }
-
-    @Test
-    public void checkForPendingFriends(){
-
-        List<User> userList = DatabaseController.checkForPendingFriends(2);
-
-        System.out.println(userList);
-
-    }
-
-    @Test
-    public void accept(){
-
-        int pascal = DatabaseController.acceptRequest(10, "Pascale");
-
-        System.out.println(pascal);
-
-    }
-
-    @Test
-    public void decline(){
-
-        DatabaseController.declineRequest(2,"Pascal");
-
-    }
-
-    @Test
-    public void getReuqested(){
-
-        List<User> userList = DatabaseController.checkForRequestsFriends(1);
-
-        System.out.println(userList);
-
-    }
-
-    @Test
-    public void checkForNoNPendingFriends(){
-
-        List<User> userList = DatabaseController.checkForNoNPendingFriends(2);
-
-        System.out.println(userList);
-
-    }
-
-    @Test
-    public void removeFriends(){
-
-        int pascale = DatabaseController.removeFriend(2, "Pascale");
-
-        System.out.println(pascale);
-
-    }
-
-    @Test
-    public void getSeps(){
-
-        int pascale = DatabaseController.getSeps(1);
-
-        System.out.println(pascale);
-
-    }
-
-    @Test
-    public void teamTest(){
-
-        int pascale = DatabaseController.getSeps(1);
-
-        System.out.println(pascale);
-
-    }
-
-    @Test
-    public void saveUser(){
-
-        User user = new User("hallo","tschau","ich@berg");
-
-        boolean b = DatabaseController.saveUser(user);
-
-        System.out.println(b);
-
-    }
-
-    @Test
-    public void getPlayerInTeam(){
-        List<Player> team = DatabaseController.getTeam(1);
-        for (Player p:
-             team) {
-            System.out.println(p);
-        }
-    }
-    @Test
-    public void getRandomPlayerInTeam(){
-        Player randomPlayer = DatabaseController.getRandomPlayer();
-        System.out.println(randomPlayer);
-    }
-    @Test
-    public void addPlayerInTeam(){
-        Team team = new Team(2,5);
-        boolean b = DatabaseController.addPlayerToTeam(team);
-        System.out.println(b);
-    }
-    @Test
-    public void getPlayerScreachResults(){
-        try {
-            Scrapper.setScreachresults();
-        } catch (InterruptedException e) {
-            e.printStackTrace();
-        }
-
-    }
-
-
-
-    @Test
-    public void Scrapper(){
-        Scrapper.getNames();
-
-    }
-    @Test
-    public void updatePlayerStrength(){
-        Scrapper.errechneGesamtStärkeAnders();
-    }
-
-    @Test
-    public void StartLootbox(){
-        List<Player> playerList = DatabaseController.openStartLootBox(1);
-        System.out.println(playerList);
-    }
-
-    @Test
-    public void Lootbox(){
-        List<Player> playerList = DatabaseController.openLootBox(1,0);
-        System.out.println(playerList);
-    }
-    @Test
-    public void addToStartelf(){
-        boolean b = DatabaseController.addPlayerToStartElf(1, 21);
-        System.out.println(b);
-    }
-
-    @Test
-    public void getStartelf(){
-        List<Player> startElf = DatabaseController.getStartElf(8);
-        System.out.println(startElf.isEmpty());
-    }
-
-}
Index: data/db.trace.db
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- data/db.trace.db	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ data/db.trace.db	(date 1593972042773)
@@ -23730,3 +23730,213 @@
 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
 	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 16:46:18 jdbc[3]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 16:47:53 jdbc[3]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 16:48:57 jdbc[4]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 16:49:59 jdbc[3]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 16:50:00 jdbc[4]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 16:53:17 jdbc[3]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 17:57:17 jdbc[3]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 17:57:28 jdbc[3]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 17:57:31 jdbc[4]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
+2020-07-05 18:00:42 jdbc[3]: exception
+java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
+	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
+	at com.intellij.database.remote.jdbc.impl.RemoteConnectionImpl.setClientInfo(RemoteConnectionImpl.java:466)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
+	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
+	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
+	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
+	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
+	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
+	at java.base/java.security.AccessController.doPrivileged(Native Method)
+	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
+	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
+	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
+	at java.base/java.lang.Thread.run(Thread.java:834)
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>groupId</groupId>\r\n    <artifactId>gruppe-23</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>1.11</maven.compiler.source>\r\n        <maven.compiler.target>1.11</maven.compiler.target>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>commons-io</groupId>\r\n            <artifactId>commons-io</artifactId>\r\n            <version>2.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>de.jensd</groupId>\r\n            <artifactId>fontawesomefx</artifactId>\r\n            <version>8.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.jfoenix</groupId>\r\n            <artifactId>jfoenix</artifactId>\r\n            <version>9.0.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.glassfish.jaxb</groupId>\r\n            <artifactId>jaxb-runtime</artifactId>\r\n            <version>2.3.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>4.13</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.jsoup</groupId>\r\n            <artifactId>jsoup</artifactId>\r\n            <version>1.13.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.h2database</groupId>\r\n            <artifactId>h2</artifactId>\r\n            <version>1.4.200</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.hibernate</groupId>\r\n            <artifactId>hibernate-core</artifactId>\r\n            <version>5.3.7.Final</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>jakarta.xml.bind</groupId>\r\n            <artifactId>jakarta.xml.bind-api</artifactId>\r\n            <version>2.3.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.google.code.gson</groupId>\r\n            <artifactId>gson</artifactId>\r\n            <version>2.2.2</version>\r\n            <scope>compile</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-controls</artifactId>\r\n            <version>14.0.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-graphics</artifactId>\r\n            <version>14.0.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-base</artifactId>\r\n            <version>14.0.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-fxml</artifactId>\r\n            <version>14.0.1</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ pom.xml	(date 1593971456721)
@@ -15,6 +15,12 @@
 
     <dependencies>
         <dependency>
+            <groupId>org.hamcrest</groupId>
+            <artifactId>hamcrest-library</artifactId>
+            <version>1.3</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
             <groupId>commons-io</groupId>
             <artifactId>commons-io</artifactId>
             <version>2.4</version>
Index: src/test/java/TestLootbox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Server.Player;\r\nimport org.junit.Test;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class TestLootbox {\r\n\r\n    @Test\r\n    public void testStartLootbox(){\r\n        //UserID auswähölen\r\n        int UserID = 1;\r\n        //Methode um Lootbox zu öffnen\r\n        List<Player> playerList = null;\r\n        //Richtige Größe\r\n        assert(playerList.size() == 22);\r\n        double allStringth = 0;\r\n        ArrayList<Player> twList = new ArrayList<>();\r\n        ArrayList<Player> dfList = new ArrayList<>();\r\n        ArrayList<Player> mfList = new ArrayList<>();\r\n        ArrayList<Player> fwList = new ArrayList<>();\r\n        for (Player player:playerList) {\r\n            allStringth += player.getGesamtStaerke();\r\n            switch(player.getPos()){\r\n                case \"TW\":twList.add(player);\r\n                    break;\r\n                case \"DF\":dfList.add(player);\r\n                    break;\r\n                case \"MF\":mfList.add(player);\r\n                    break;\r\n                case \"FW\":fwList.add(player);\r\n                    break;\r\n            }\r\n        }\r\n        //Richtigen Mittelwert der Stärke\r\n        allStringth /= 22;\r\n        assert(allStringth == 50);\r\n\r\n        //Richtige Aufteilung der Positionen\r\n        assert(twList.size() == 2);\r\n        assert(dfList.size() == 7);\r\n        assert(mfList.size() == 10);\r\n        assert(fwList.size() == 3);\r\n\r\n        //Methode um das Team zu erhalten\r\n        List<Player> team = null;\r\n\r\n        for (Player p : playerList) {\r\n            //Richtige Speicherung in die Datenbank\r\n            assert (team.contains(p));\r\n        }\r\n\r\n        for (int j = 0; j < playerList.size(); j++) {\r\n            for (int j2 = 0; j2 < playerList.size(); j2++) {\r\n                if (playerList.get(j).equals(playerList.get(j2)) && j != j2){\r\n                    //Keine Duplikate\r\n                    assert(false);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/TestLootbox.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/test/java/TestLootbox.java	(date 1593968012594)
@@ -1,3 +1,4 @@
+import Server.DatabaseController;
 import Server.Player;
 import org.junit.Test;
 
@@ -8,13 +9,11 @@
 
     @Test
     public void testStartLootbox(){
-        //UserID auswähölen
-        int UserID = 1;
-        //Methode um Lootbox zu öffnen
-        List<Player> playerList = null;
+
+        List<Player> playerList = DatabaseController.openStartLootBox(7);
         //Richtige Größe
         assert(playerList.size() == 22);
-        double allStringth = 0;
+        int allStringth = 0;
         ArrayList<Player> twList = new ArrayList<>();
         ArrayList<Player> dfList = new ArrayList<>();
         ArrayList<Player> mfList = new ArrayList<>();
@@ -42,8 +41,7 @@
         assert(mfList.size() == 10);
         assert(fwList.size() == 3);
 
-        //Methode um das Team zu erhalten
-        List<Player> team = null;
+        List<Player> team = DatabaseController.getTeam(7);
 
         for (Player p : playerList) {
             //Richtige Speicherung in die Datenbank
Index: .idea/gruppe-23.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"FacetManager\">\r\n    <facet type=\"hibernate\" name=\"Hibernate\">\r\n      <configuration>\r\n        <datasource-map>\r\n          <unit-entry name=\"hibernate.cfg.xml\" value=\"102278c4-83e4-45bb-af1b-d2421d4e7268\" />\r\n        </datasource-map>\r\n        <naming-strategy-map />\r\n        <deploymentDescriptor name=\"hibernate.cfg.xml\" url=\"file://$MODULE_DIR$/src/main/resources/hibernate.cfg.xml\" />\r\n      </configuration>\r\n    </facet>\r\n  </component>\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_11\">\r\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\r\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"library\" name=\"JavaFx\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: commons-io:commons-io:2.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: de.jensd:fontawesomefx:8.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.jfoenix:jfoenix:9.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.jaxb:jaxb-runtime:2.3.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.glassfish.jaxb:txw2:2.3.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.sun.istack:istack-commons-runtime:3.0.8\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jvnet.staxex:stax-ex:1.8.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.sun.xml.fastinfoset:FastInfoset:1.2.16\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.activation:jakarta.activation-api:1.2.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: junit:junit:4.13\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.hamcrest:hamcrest-core:1.3\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jsoup:jsoup:1.13.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.h2database:h2:1.4.200\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate:hibernate-core:5.3.7.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss.logging:jboss-logging:3.3.2.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: javax.persistence:javax.persistence-api:2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.javassist:javassist:3.23.1-GA\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: net.bytebuddy:byte-buddy:1.8.17\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: antlr:antlr:2.7.7\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.1.1.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.jboss:jandex:2.0.5.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.fasterxml:classmate:1.3.4\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: javax.activation:javax.activation-api:1.2.0\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.dom4j:dom4j:2.1.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.hibernate.common:hibernate-commons-annotations:5.0.4.Final\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: jakarta.xml.bind:jakarta.xml.bind-api:2.3.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: com.google.code.gson:gson:2.2.2\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-controls:14.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-controls:win:14.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-graphics:14.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-graphics:win:14.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-base:14.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-base:win:14.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-fxml:14.0.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" name=\"Maven: org.openjfx:javafx-fxml:win:14.0.1\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gruppe-23.iml	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ .idea/gruppe-23.iml	(date 1593971471242)
@@ -4,7 +4,7 @@
     <facet type="hibernate" name="Hibernate">
       <configuration>
         <datasource-map>
-          <unit-entry name="hibernate.cfg.xml" value="102278c4-83e4-45bb-af1b-d2421d4e7268" />
+          <unit-entry name="hibernate.cfg.xml" value="7265eeb5-3aa8-47c6-a4d4-84760a0f6739" />
         </datasource-map>
         <naming-strategy-map />
         <deploymentDescriptor name="hibernate.cfg.xml" url="file://$MODULE_DIR$/src/main/resources/hibernate.cfg.xml" />
@@ -23,6 +23,8 @@
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" name="JavaFx" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-library:1.3" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
     <orderEntry type="library" name="Maven: commons-io:commons-io:2.4" level="project" />
     <orderEntry type="library" name="Maven: de.jensd:fontawesomefx:8.1" level="project" />
     <orderEntry type="library" name="Maven: com.jfoenix:jfoenix:9.0.1" level="project" />
@@ -33,7 +35,6 @@
     <orderEntry type="library" name="Maven: com.sun.xml.fastinfoset:FastInfoset:1.2.16" level="project" />
     <orderEntry type="library" name="Maven: jakarta.activation:jakarta.activation-api:1.2.1" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.13" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
     <orderEntry type="library" name="Maven: org.jsoup:jsoup:1.13.1" level="project" />
     <orderEntry type="library" name="Maven: com.h2database:h2:1.4.200" level="project" />
     <orderEntry type="library" name="Maven: org.hibernate:hibernate-core:5.3.7.Final" level="project" />
Index: src/test/java/testTournement.java
===================================================================
--- src/test/java/testTournement.java	(date 1593975402664)
+++ src/test/java/testTournement.java	(date 1593975402664)
@@ -0,0 +1,13 @@
+import org.junit.Test;
+
+public class testTournement {
+
+    @Test
+    public void testTournment(){
+
+
+
+    }
+
+
+}
Index: src/main/java/Server/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport javafx.beans.property.IntegerProperty;\r\nimport javafx.beans.property.SimpleIntegerProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.beans.property.StringProperty;\r\n\r\nimport javax.persistence.*;\r\nimport java.sql.Date;\r\n\r\n@Entity\r\n@Table(name = \"player\")\r\npublic class Player {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private int id;\r\n    @Column(name = \"name\")\r\n    private String name;\r\n    @Column(name = \"pos\")\r\n    private String pos;\r\n    @Column(name = \"dateOfBirth\")\r\n    private Date dateOfBirth;\r\n    @Column(name = \"nation\")\r\n    private String nation;\r\n    @Column(name = \"club\")\r\n    private String club;\r\n    @Column(name = \"screachResults\")\r\n    private int screachResults;\r\n    @Column(name = \"GESAMTSTAERKE\")\r\n    private double gesamtStaerke;\r\n\r\n    public int getScreachResults() {\r\n        return screachResults;\r\n    }\r\n\r\n    public void setScreachResults(int screachResults) {\r\n        this.screachResults = screachResults;\r\n    }\r\n\r\n    public double getGesamtStaerke() {\r\n        return gesamtStaerke;\r\n    }\r\n\r\n    public void setGesamtStaerke(double gesamtStärke) {\r\n        this.gesamtStaerke = gesamtStärke;\r\n    }\r\n\r\n    public Player() {\r\n    }\r\n\r\n    public Player(String name, String pos, Date dateOfBirth, String nation, String club) {\r\n        this.name = name;\r\n        this.pos = pos;\r\n        this.dateOfBirth = dateOfBirth;\r\n        this.nation = nation;\r\n        this.club = club;\r\n\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getPos() {\r\n        return pos;\r\n    }\r\n\r\n    public void setPos(String pos) {\r\n        this.pos = pos;\r\n    }\r\n\r\n    public Date getDateOfBirth() {\r\n        return dateOfBirth;\r\n    }\r\n\r\n    public void setDateOfBirth(Date dateOfBirth) {\r\n        this.dateOfBirth = dateOfBirth;\r\n    }\r\n\r\n    public String getNation() {\r\n        return nation;\r\n    }\r\n\r\n    public void setNation(String nation) {\r\n        this.nation = nation;\r\n    }\r\n\r\n    public String getClub() {\r\n        return club;\r\n    }\r\n\r\n    public void setClub(String club) {\r\n        this.club = club;\r\n    }\r\n\r\n    public StringProperty nameProperty() {\r\n        return new SimpleStringProperty(name);\r\n    }\r\n\r\n    public IntegerProperty idProperty() {\r\n        return new SimpleIntegerProperty(id);\r\n    }\r\n\r\n    public StringProperty dateOfBirthProperty() {\r\n        return new SimpleStringProperty(dateOfBirth.toString());\r\n    }\r\n\r\n    public StringProperty nationProperty() {\r\n        return new SimpleStringProperty(nation);\r\n    }\r\n\r\n    public StringProperty posProperty() {\r\n        return new SimpleStringProperty(pos);\r\n    }\r\n\r\n    public StringProperty clubProperty() {\r\n        return new SimpleStringProperty(club);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Player{\" +\r\n                \"id=\" + id +\r\n                \", name='\" + name + '\\'' +\r\n                \", pos='\" + pos + '\\'' +\r\n                \", dateOfBirth=\" + dateOfBirth +\r\n                \", nation='\" + nation + '\\'' +\r\n                \", club='\" + club + '\\'' +\r\n                \", screachResults=\" + screachResults +\r\n                \", gesamtStärke=\" + gesamtStaerke +\r\n                '}';\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n        Player player = (Player) o;\r\n        return name.equals(player.getName()) &&\r\n                pos.equals(player.getPos()) &&\r\n                dateOfBirth.equals(player.getDateOfBirth()) &&\r\n                nation.equals(player.getNation()) &&\r\n                club.equals(player.getClub());\r\n    }\r\n\r\n    public void update(Player newplayer) {\r\n\r\n        setGesamtStaerke(newplayer.getGesamtStaerke());\r\n        setScreachResults(newplayer.getScreachResults());\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/Server/Player.java	(revision faba1dab6da9a7d37e3ba27f133147c509833b9d)
+++ src/main/java/Server/Player.java	(date 1593965680170)
@@ -7,6 +7,7 @@
 
 import javax.persistence.*;
 import java.sql.Date;
+import java.util.List;
 
 @Entity
 @Table(name = "player")
@@ -162,4 +163,5 @@
         setScreachResults(newplayer.getScreachResults());
 
     }
+
 }
Index: src/test/java/TestMatch.java
===================================================================
--- src/test/java/TestMatch.java	(date 1593973826901)
+++ src/test/java/TestMatch.java	(date 1593973826901)
@@ -0,0 +1,157 @@
+import Server.DatabaseController;
+import Server.Player;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.hamcrest.collection.IsEmptyCollection;
+
+import static org.hamcrest.CoreMatchers.*;
+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
+import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;
+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
+import static org.hamcrest.MatcherAssert.assertThat;
+
+public class TestMatch {
+
+    List<Player> testPlayers1 = new ArrayList<>();
+    List<Player> testPlayers2 = new ArrayList<>();
+
+    @Before
+    public void setup(){
+
+        List<Player> player = DatabaseController.getPlayer();
+
+        ArrayList<Player> FW = new ArrayList<>();
+        ArrayList<Player> MF = new ArrayList<>();
+        ArrayList<Player> DF = new ArrayList<>();
+        ArrayList<Player> TW = new ArrayList<>();
+
+        for (Player p:player) {
+            switch (p.getPos()){
+
+                case "FW":
+                    if(FW.size() < 2){
+                        FW.add(p);
+                    }
+                    break;
+                case "MF":
+                    if(MF.size() < 4){
+                        MF.add(p);
+                    }
+                    break;
+                case "DF":
+                    if(DF.size() < 4){
+                        DF.add(p);
+                    }
+                    break;
+                case "TW":
+                    if(TW.size() < 1){
+                        TW.add(p);
+                    }
+                    break;
+            }
+
+            if(TW.size() == 1 && DF.size() == 4 && MF.size() == 4 && FW.size() == 2){
+                break;
+            }
+
+        }
+
+        testPlayers1.clear();
+        testPlayers2.clear();
+
+        testPlayers1.addAll(TW);
+        testPlayers1.addAll(DF);
+        testPlayers1.addAll(MF);
+        testPlayers1.addAll(FW);
+        testPlayers2.addAll(testPlayers1);
+    }
+
+    @Test
+    public void testAufstellung(){
+
+        //1. Schere-Stein-Papier-Echse-Spock
+        String [] lineups = {"4-4-2", "5-4-1", "3-4-3", "4-3-3", "3-5-2"};
+        ArrayList<Integer> actual = new ArrayList<>();
+        List<Integer> expected = Arrays.asList(0,1,1,-1,-1,0,-1,1,1,0,-1,1,0,-1,0);
+        for (int i = 0; i < lineups.length; i++) {
+            for (int j = i; j < lineups.length; j++) {
+                actual.add(DatabaseController.getLineUpBonus(lineups[i],lineups[j]));
+            }
+        }
+        assertThat(actual,is(expected));
+        //Eine PDF der Matrix ist in resources/Icon/AufstellungMatrix.pdf
+
+    }
+
+    @Test
+    public void testDurchschnittsStaerke(){
+        //Durchschnittliche TeamStärke ohne MF
+        assertThat(testPlayers1,is(testPlayers2));
+
+        int durchschnittStärkeTeam = DatabaseController.getDurchschnittStärkeTeam(testPlayers1, testPlayers2, "4-4-2", "4-4-2");
+        assert(durchschnittStärkeTeam == 0);
+
+        Player player = upgrade(testPlayers1.get(0));
+        testPlayers1.remove(0);
+        testPlayers1.add(player);
+
+        durchschnittStärkeTeam = DatabaseController.getDurchschnittStärkeTeam(testPlayers1, testPlayers2, "4-4-2", "4-4-2");
+        assert(durchschnittStärkeTeam == 1);
+
+        setup();
+
+        player = upgrade(testPlayers2.get(0));
+        testPlayers2.remove(0);
+        testPlayers2.add(player);
+
+        durchschnittStärkeTeam = DatabaseController.getDurchschnittStärkeTeam(testPlayers1, testPlayers2, "4-4-2", "4-4-2");
+        assert(durchschnittStärkeTeam == -1);
+
+    }
+
+    private Player upgrade(Player player) {
+
+        Player player1 = new Player();
+        player1.setGesamtStaerke(player.getGesamtStaerke() + 10);
+        player1.setPos(player.getPos());
+        return player1;
+    }
+
+    @Test
+    public void testMFDurchscnittsStaerke(){
+
+        assertThat(testPlayers1,is(testPlayers2));
+
+        int durchschnittStärkeTeam = DatabaseController.getMFDurchschnittStärke(testPlayers1, testPlayers2, "4-4-2", "4-4-2");
+        assert(durchschnittStärkeTeam == 0);
+
+        Player player = upgrade(testPlayers1.get(5));
+        testPlayers1.remove(0);
+        testPlayers1.add(player);
+
+        durchschnittStärkeTeam = DatabaseController.getMFDurchschnittStärke(testPlayers1, testPlayers2, "4-4-2", "4-4-2");
+        assert(durchschnittStärkeTeam == 1);
+
+        setup();
+
+        player = upgrade(testPlayers2.get(5));
+        testPlayers2.remove(0);
+        testPlayers2.add(player);
+
+        durchschnittStärkeTeam = DatabaseController.getMFDurchschnittStärke(testPlayers1, testPlayers2, "4-4-2", "4-4-2");
+        assert(durchschnittStärkeTeam == -1);
+
+    }
+
+}
